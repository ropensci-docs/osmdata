[{"path":[]},{"path":"https://docs.ropensci.org/osmdata/CONTRIBUTING.html","id":"opening-issues","dir":"","previous_headings":"","what":"Opening issues","title":"Contributing to osmdata","text":"easiest way note behavioural curiosities request new features opening github issue.","code":""},{"path":"https://docs.ropensci.org/osmdata/CONTRIBUTING.html","id":"development-guidelines","dir":"","previous_headings":"","what":"Development guidelines","title":"Contributing to osmdata","text":"’d like contribute changes osmdata, use GitHub flow proposing, submitting, reviewing, accepting changes. haven’t done , ’s nice overview git , well best practices submitting pull requests . osmdata coding style diverges somewhat commonly used R style guide, primarily following two ways, improve code readability: (1) curly braces vertically aligned: (2) Also highlighted code additional whitespace permeates osmdata code. Words text separated whitespace, code words : natural result one ends writing space function (). ’s . can use precommit::use_precommit() enforce style git commit hooks defined .pre-commit-config.yaml. first commit can slow hooks compiled installed. commit ignoring hooks, git commit ---verify, shortened version, git commit -n.","code":"this <- function () {     x <- 1 } this <- function(){     x <- 1 } this <- function1 (function2 (x)) this <- function1(function2(x)) this <- function ()"},{"path":"https://docs.ropensci.org/osmdata/CONTRIBUTING.html","id":"maintenance","dir":"","previous_headings":"","what":"Maintenance","title":"Contributing to osmdata","text":"refresh README.md file modifying README.Rmd, use: updating package dependencies DESCRIPTION metadata, refresh codemeta.json:","code":"devtools::build_readme(output_format=\"md_document\") codemetar::write_codemeta()"},{"path":"https://docs.ropensci.org/osmdata/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to osmdata","text":"want encourage warm, welcoming, safe environment contributing project. See code conduct information.","code":""},{"path":"https://docs.ropensci.org/osmdata/articles/osm-sf-translation.html","id":"openstreetmap-data-structure","dir":"Articles","previous_headings":"","what":"1. OpenStreetMap Data Structure","title":"3. Translation of OSM to Simple Features","text":"OpenStreetMap (OSM) data unique structure directly reconcilable modes representing spatial data, notably including widely-adopted Simple Features (SF) scheme Open Geospatial Consortium (OGC). three primary spatial objects OSM : nodes, directly translatable spatial points ways, may closed, case form polygons, unclosed, case (non-polygonal) lines. relations higher-level objects used specify relationships collections ways nodes. several recognised categories relations, spatial terms may reduced binary distinction : multipolygon relations, specify relationships exterior polygon (designating role='outer') possible inner polygons (role='inner'). may may designated type=multipolygon. Political boundaries, example, often type=boundary rather explicit type-multipolygon. osmdata identifies multipolygons relation objects least one member role=outer role=inner. absence inner outer roles, OSM relation assumed non-polygonal, instead form collection non-enclosing lines.","code":""},{"path":"https://docs.ropensci.org/osmdata/articles/osm-sf-translation.html","id":"simple-features-data-structure","dir":"Articles","previous_headings":"","what":"2. Simple Features Data Structure","title":"3. Translation of OSM to Simple Features","text":"representation spatial objects Simple Features described length OGC, document merely reviewing relevant aspects. SF system assumes spatial features can represented one seven distinct primary classes, convention referred capital letters. Relevant classes OSM data : POINT MULTIPOINT LINESTRING MULTILINESTRING POLYGON MULTIPOLYGON (seventh primary class GEOMETRYCOLLECTION, contains several objects different geometries.) SF (acronym may connote singular plural) consists sequence spatial coordinates, OSM data ever XY coordinates represented strings enclosed within brackets. addition coordinate data associated coordinate reference systems, SF may include number additional data quantify qualify feature interest. sf extension R, example, single SF represented one row data.frame, geometry stored single column, number columns containing additional data. Simple Feature geometries referred vignette using capital letters (POLYGON), OSM geometries use lower case (polygon). Similarly, Simple Features standard OGC referred SF, R package name referred R::sf–upper case R followed lower case sf. Much functionality R::sf determined underlying Geospatial Data Abstraction Library (GDAL; described ). Representations data often discussed reference GDAL/sf, case may always assumed translation representation data determined GDAL directly creators R::sf.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/articles/osm-sf-translation.html","id":"osm-nodes","dir":"Articles","previous_headings":"3. How osmdata translates OSM into Simple Features","what":"3.1. OSM Nodes","title":"3. Translation of OSM to Simple Features","text":"OSM nodes translate directly SF::POINT objects, OSM key-value pairs stored additional data.frame columns.","code":""},{"path":"https://docs.ropensci.org/osmdata/articles/osm-sf-translation.html","id":"osm-ways","dir":"Articles","previous_headings":"3. How osmdata translates OSM into Simple Features","what":"3.2. OSM Ways","title":"3. Translation of OSM to Simple Features","text":"OSM ways may either polygons (non-polygonal) lines. osmdata translates SF::LINESTRING SF::POLYGON objects, respectively. Although polygonal non-polygonal ways may systematically different key fields, conflated single set key values common way objects regardless shape. enables direct comparison uniform operation SF::LINESTRING SF::POLYGON objects.","code":""},{"path":"https://docs.ropensci.org/osmdata/articles/osm-sf-translation.html","id":"osm-relations","dir":"Articles","previous_headings":"3. How osmdata translates OSM into Simple Features","what":"3.3 OSM Relations","title":"3. Translation of OSM to Simple Features","text":"OSM relations comprising members role=outer role=inner translated SF::MULTIPOLYGON objects; otherwise form SF::MULTILINESTRING objects. preceding case OSM ways, potentially systematic differences OSM key fields multipolygon relation objects ignored favour returning identical key fields cases, whether value fields keys exist.","code":""},{"path":"https://docs.ropensci.org/osmdata/articles/osm-sf-translation.html","id":"a-multipolygon-relations","dir":"Articles","previous_headings":"3. How osmdata translates OSM into Simple Features > 3.3 OSM Relations","what":"3.3(a) Multipolygon Relations","title":"3. Translation of OSM to Simple Features","text":"OSM multipolygon translated osmdata single SF::MULTIPOLYGON object additional column specifying num_members. SF geometry thus consists list (R::List object) number polygons, first outer polygon, subsequent members forming closed inner rings (either individually combination). inner polygons also represented one OSM objects, generally include detailed data individual components able represented single multipolygon representation. inner polygon therefore additionally stored sf::MULTIPOLYGON data.frame along associated data. Thus row containing multipolygon num_polygon polygons followed num_polygon - 1 rows containing data inner polygon. Note OSM relation objects generally fewer (different) key-value pairs OSM way objects. OSM system, data describing detailed properties constituent ways given OSM relation stored ways rather relation. osmdata follows general principle, stored geometry ways relation relation (, part MULTIPOLYGON MULTILINESTRING object), ways also stored LINESTRING (potentially POLYGON) objects, additional key-value data may accessed.","code":""},{"path":"https://docs.ropensci.org/osmdata/articles/osm-sf-translation.html","id":"b-multilinestring-relations","dir":"Articles","previous_headings":"3. How osmdata translates OSM into Simple Features > 3.3 OSM Relations","what":"3.3(b) Multilinestring Relations","title":"3. Translation of OSM to Simple Features","text":"OSM relations multipolygons translated SF::MULTILINESTRING objects. member OSM relation attributed role, may empty. osmdata collates ways within relation according role attributes. Thus, unlike multipolygon relations always translated single sf::MULTIPOLYGON object, multilinestring relations translated omsdata potentially several sf::MULTILINESTRING objects, one unique role. particularly useful relations often used designated extended highways (example, designated bicycle routes motorways), yet often exist primary alternative forms, categories specified roles. Separating roles enables ready access desired role. multilinestring objects also column specifying num_members, multipolygons, primary member followed num_members rows, one member multilinestring.","code":""},{"path":"https://docs.ropensci.org/osmdata/articles/osm-sf-translation.html","id":"gdal-translation-of-osm-into-simple-features","dir":"Articles","previous_headings":"","what":"4. GDAL Translation of OSM into Simple Features","title":"3. Translation of OSM to Simple Features","text":"R package sf provide R implementation Spatial Features, provides wrapper around GDAL reading geospatial data. GDAL provides ‘driver’ read OSM data, thus sf can also used read OSM data R, detailed main osmdata vignette. However, GDAL translation OSM data differs several important ways osmdata translation. primary difference GDAL returns unique objects spatial (SF) type. Thus sf::POINT objects consist points otherwise members ‘higher’ object (line, polygon, relation objects). Although given set OSM data may actually contain great many points, attempting load generally return surprisingly points.","code":"sf::st_read (file, layer = 'points')"},{"path":"https://docs.ropensci.org/osmdata/articles/osm-sf-translation.html","id":"osm-nodes-1","dir":"Articles","previous_headings":"4. GDAL Translation of OSM into Simple Features","what":"4.1. OSM Nodes","title":"3. Translation of OSM to Simple Features","text":"Apart numerical difference arising osmdata returning sf::POINTS structure containing nodes within given set OSM data, sf::st_read (file, layer='points') returns points represented structure, representation points remains otherwise broadly similar. major difference osmdata retains key-value pairs present given set OSM data, whereas GDAL/sf retains select . Moreover, keys returned GDAL/sf pre-defined invariant, meaning data returned sf::st_read (...) may often contain key columns resultant data.frame contain (non-NA) data. difference illustrated example repeated themain osmdata vignette, principles applying following classes OSM data. following three lines define query download resultant data XML file. data may converted SF representations using either R::sf osmdata, OSM keys column names resultant data.frame objects. osmdata returns far key fields GDAL/sf. importantly, however, GDAL/sf returns pre-defined key fields regardless whether contain data: contrast, osmdata returns key fields contain data (excludes address example).","code":"q <- opq (bbox = 'Trentham, Australia') q <- add_osm_feature (q, key = 'name') # any named objects osmdata_xml (q, 'trentham.osm') names (sf::st_read ('trentham.osm', layer = 'points', quiet = TRUE)) ##  [1] \"osm_id\"     \"name\"       \"barrier\"    \"highway\"    \"ref\"        ##  [6] \"address\"    \"is_in\"      \"place\"      \"man_made\"   \"other_tags\" ## [11] \"geometry\" names (osmdata_sf (q, 'trentham.osm')$osm_points) ##  [1] \"osm_id\"           \"name\"             \"X_description_\"   \"X_waypoint_\"      ##  [5] \"addr.city\"        \"addr.housenumber\" \"addr.postcode\"    \"addr.street\"      ##  [9] \"amenity\"          \"barrier\"          \"denomination\"     \"foot\"             ## [13] \"ford\"             \"highway\"          \"leisure\"          \"note_1\"           ## [17] \"phone\"            \"place\"            \"railway\"          \"railway.historic\" ## [21] \"ref\"              \"religion\"         \"shop\"             \"source\"           ## [25] \"tourism\"          \"waterway\"         \"geometry\" addr <- sf::st_read ('trentham.osm', layer = 'points', quiet = TRUE)$address all (is.na (addr)) ## [1] TRUE"},{"path":"https://docs.ropensci.org/osmdata/articles/osm-sf-translation.html","id":"osm-ways-1","dir":"Articles","previous_headings":"4. GDAL Translation of OSM into Simple Features","what":"4.2. OSM Ways","title":"3. Translation of OSM to Simple Features","text":"points, GDAL/sf returns ways represented contained ‘higher’ objects (OSM relations interpreted SF::MULTIPOLYGON SF::MULTILINESTRING objects). osmdata returns ways, thus enables, example, examination full attributes member multigeometry object. possible GDAL/sf translation. points, additional difference osmdata GDAL/sf osmdata retains key-value pairs, whereas GDAL retains select .","code":""},{"path":"https://docs.ropensci.org/osmdata/articles/osm-sf-translation.html","id":"osm-relations-1","dir":"Articles","previous_headings":"4. GDAL Translation of OSM into Simple Features","what":"4.3 OSM Relations","title":"3. Translation of OSM to Simple Features","text":"Translation OSM relations Simple Features differs significantly osmdata GDAL/sf.","code":""},{"path":"https://docs.ropensci.org/osmdata/articles/osm-sf-translation.html","id":"a-multipolygon-relations-1","dir":"Articles","previous_headings":"4. GDAL Translation of OSM into Simple Features > 4.3 OSM Relations","what":"4.3(a) Multipolygon Relations","title":"3. Translation of OSM to Simple Features","text":"indicated , multipolygon relations translated broadly comparable ways osmdata sf/GDAL. Note, however, way members OSM relation may specified arbitrary order, multipolygonal way may necessarily traced simply following segments order returned sf/GDAL.","code":""},{"path":"https://docs.ropensci.org/osmdata/articles/osm-sf-translation.html","id":"b-multilinestring-relations-1","dir":"Articles","previous_headings":"4. GDAL Translation of OSM into Simple Features > 4.3 OSM Relations","what":"4.3(b) Multilinestring Relations","title":"3. Translation of OSM to Simple Features","text":"Linestring relations simply read GDAL directly terms constituent ways, resulting single SF::MULTILINESTRING object contains exactly number lines ways OSM relation, regardless role attributes. Note roles frequently used specify alternative multi-way routes single OSM relation. distinctions primary alternative erased GDAL/sf reading.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/articles/osm-sf-translation.html","id":"routing","dir":"Articles","previous_headings":"5 Examples","what":"5.1 Routing","title":"3. Translation of OSM to Simple Features","text":"Navigable paths, routes, ways tagged within OSM highway, readily enabling overpass query return ways can used routing purposes. Routes nevertheless commonly assembled within OSM relations, particularly form major, designated transport ways long-distance foot bicycle paths major motorways.","code":""},{"path":"https://docs.ropensci.org/osmdata/articles/osm-sf-translation.html","id":"a-routing-with-sfgdal","dir":"Articles","previous_headings":"5 Examples > 5.1 Routing","what":"5.1(a) Routing with sf/GDAL","title":"3. Translation of OSM to Simple Features","text":"query key=highway translated GDAL/sf return ways part ‘higher’ structure SF::LINESTRING objects, components entire transport network might also returned : SF::MULTIPOLYGON objects, holding single ways form simple polygons (, start end points ); SF::MULTIPOLYGON objects holding single (non-polygonal) ways combine form OSM multipolygon relation (, collection ways ultimately forms closed role=outer polygon). SF::MULTILINESTRING objects holding single (non-polygonal) ways combine form OSM relation multipolygon. Translating data single form usable routing purposes simple. particular problem extremely difficult resolve reconciling SF::MULTIPOLYGON objects geometry SF::LINESTRING objects. Highway components contained SF::MULTIPOLYGON objects need re-connected network represented SF::LINESTRING objects, yet OSM identifiers MULTIPOLYGON components removed sf/GDAL, preventing components directly re-connected. way ensure connection re-connect geographic points sharing identical coordinates. require code long complicated worthwhile demonstrating .","code":""},{"path":"https://docs.ropensci.org/osmdata/articles/osm-sf-translation.html","id":"b-routing-with-osmdata","dir":"Articles","previous_headings":"5 Examples > 5.1 Routing","what":"5.1(b) Routing with osmdata","title":"3. Translation of OSM to Simple Features","text":"osmdata retains underlying ways ‘higher’ structures (SF::MULTIPOLYGON SF::MULTILINESTRING objects) SF::LINESTRING SF::POLYGON objects. geometries latter objects duplicate ‘higher’ relations, yet contain additional key-value pairs corresponding way. importantly, OSM ID values members relation stored within relation, readily enabling individual ways (LINESTRING POLYGON objects) identified relation (MULTIPOLYGON MULTILINESTRING object). osmdata translation thus readily enables singularly complete network reconstructed simply combining SF::LINESTRING layer SF::POLYGON layer. layers always contain entirely independent members, always able directly combined without duplicating objects.","code":""},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata-sc.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"2. Elevation data and OSM: The osmdata_sc function","text":"silicate new form representing spatial data R. contrast forms (sp sf), silicate multi-tabular, primarily consists one table point entities; one table binary relationships point entities – spatial ‘’edges’’ – additional tables higher-order inter-relationships objects. new osmdata function osmdata_sc() returns Open Street Map (OSM) data silicate form. form also closely resembles data storage scheme Open Street Map , case consists following tables: vertex table holding coordinates OSM nodes; edge table mapping edge connections vertices; object_link_edge table linking edge entities OSM objects part; object table holding ‘key’–‘value’ pairs OSM way object; relation_properties table holding ‘key’–‘value’ pairs OSM relation object; relation_members table holding members OSM relation; nodes table holding ‘key’–‘value’ pairs OSM node object. translation underlying OSM data structure – consisting nodes, way, relations – Simple Features (SF) via osmdata_sf() function less 100% faithful, results representational loss compared original OSM structure (details, see vignette translation OSM SF). contrast, osmdata_sc() function delivers representation entirely faithful underlying OSM representation. One advantages silicate format offered osmdata package enabling elevation data combined OSM data. result silicate-format object able submitted directly dodgr package enable routing street networks accounts elevation changes.","code":""},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata-sc.html","id":"elevation-data","dir":"Articles","previous_headings":"","what":"2. Elevation Data","title":"2. Elevation data and OSM: The osmdata_sc function","text":"Incorporating elevation data OSM data currently requires local storage desired elevation data. must downloaded desired region http://srtm.csi.cgiar.org/srtmdata Geo TIFF format. Elevation data may incorporated silicate-format data generated x <- osmdata_sc() osm_elevation() function. entire procedure demonstrated following lines: object vertex table like : Incorporating elevation data simple function simply appends elevation values vertex_ table, now looks like :","code":"dat <- opq (\"omaha nebraska\") %>%     add_osm_feature (key = \"highway\") %>%     osmdata_sc () dat$vertex ## # A tibble: 345,239 × 3 ##       x_    y_ vertex_   ##    <dbl> <dbl> <chr>     ##  1 -95.9  41.2 31536366  ##  2 -95.9  41.2 31536367  ##  3 -95.9  41.2 31536368  ##  4 -95.9  41.2 31536370  ##  5 -95.9  41.2 31536378  ##  6 -95.9  41.2 31536379  ##  7 -96.2  41.3 133898322 ##  8 -96.2  41.3 133898328 ##  9 -96.3  41.3 133898340 ## 10 -96.3  41.3 133898342 ## # ℹ 345,229 more rows dat <- osm_elevation (dat, elev_file = \"/path/to/elevation/data/filename.tiff\") ## Loading required namespace: raster ## Elevation data from Consortium for Spatial Information; see https://srtm.csi.cgiar.org/srtmdata/ dat$vertex_ ## # A tibble: 345,239 × 4 ##       x_    y_    z_ vertex_   ##    <dbl> <dbl> <dbl> <chr>     ##  1 -95.9  41.2   291 31536366  ##  2 -95.9  41.2   295 31536367  ##  3 -95.9  41.2   297 31536368  ##  4 -95.9  41.2   301 31536370  ##  5 -95.9  41.2   295 31536378  ##  6 -95.9  41.2   300 31536379  ##  7 -96.2  41.3   359 133898322 ##  8 -96.2  41.3   359 133898328 ##  9 -96.3  41.3   358 133898340 ## 10 -96.3  41.3   358 133898342 ## # ℹ 345,229 more rows"},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata-sc.html","id":"example-usage-of-elevation-data","dir":"Articles","previous_headings":"2. Elevation Data","what":"Example usage of elevation data","title":"2. Elevation data and OSM: The osmdata_sc function","text":"silicate format easy manipulate using standard dplyr verbs. following code uses mapdeck package package colour street network elevation data downloaded processed preceding lines elevation network edge. first join vertex elevation data edges, calculate mean elevation edge. data can submitted directly mapdeck generate interactive plot following code: (result shown , can directly inspected simply running lines.)","code":"edges <- dplyr::left_join (dat$edge, dat$vertex, by = c (\".vx0\" = \"vertex_\")) %>%     dplyr::rename (\".vx0_x\" = x_, \".vx0_y\" = y_, \".vx0_z\" = z_) %>%     dplyr::left_join (dat$vertex, by = c (\".vx1\" = \"vertex_\")) %>%     dplyr::rename (\".vx1_x\" = x_, \".vx1_y\" = y_, \".vx1_z\" = z_) %>%     dplyr::mutate (\"zmn\" = (.vx0_z + .vx1_z) / 2) %>%     dplyr::select (-c (.vx0_z, .vx1_z)) edges ## # A tibble: 376,370 × 8 ##    .vx0       .vx1       edge_      .vx0_x .vx0_y .vx1_x .vx1_y   zmn ##    <chr>      <chr>      <chr>       <dbl>  <dbl>  <dbl>  <dbl> <dbl> ##  1 1903265686 1903265664 V6kgqvWjtM  -96.2   41.3  -96.2   41.3   351 ##  2 1903265664 1903265638 mX4HQkykiD  -96.2   41.3  -96.2   41.3   352 ##  3 1903265638 1903265710 26e5NHT8nI  -96.2   41.3  -96.2   41.3   352 ##  4 1903265710 1903265636 9TOmVAvGH4  -96.2   41.3  -96.2   41.3   352 ##  5 1903265636 1903265685 hYbpf832vX  -96.2   41.3  -96.2   41.3   352 ##  6 1903265685 1903265678 ctvd1FWGEw  -96.2   41.3  -96.2   41.3   352 ##  7 1903265678 1903265646 mvaAOdSOKA  -96.2   41.3  -96.2   41.3   352 ##  8 1903265646 1903265714 dSVFPNDFty  -96.2   41.3  -96.2   41.3   352 ##  9 1903265714 1903265659 uc8L3jGR87  -96.2   41.3  -96.2   41.3   352 ## 10 1903265659 1903265702 MpjXnvIvcF  -96.2   41.3  -96.2   41.3   352 ## # ℹ 376,360 more rows library (mapdeck) set_token (Sys.getenv (\"MAPBOX_TOKEN\")) # load local token for MapBox mapdeck (style = mapdeck_style (\"dark\")) %>%     add_line (edges,         origin = c (\".vx0_x\", \".vx0_y\"),         destination = c (\".vx1_x\", \".vx1_y\"),         stroke_colour = \"z\",         legend = TRUE     )"},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"1. osmdata","text":"osmdata R package downloading using data OpenStreetMap (OSM). OSM global open access mapping project, free open ODbL licence (OpenStreetMap contributors 2017). many benefits, ensuring transparent data provenance ownership, enabling real-time evolution database , allowing anyone contribute, encouraging democratic decision making citizen science (Johnson 2017). See OSM wiki find contribute world’s open geographical data commons. Unlike OpenStreetMap package, facilitates download raster tiles, osmdata provides access vector data underlying OSM. osmdata can installed CRAN loaded usual way: development version osmdata can installed remotes package using following command: osmdata uses overpass API download OpenStreetMap (OSM) data can convert results variety formats, including Simple Features (typically class sf) Spatial objects (e.g. SpatialPointsDataFrame), defined packages sf sp packages respectively. overpass C++ library serves OSM data web. overpass queries begin bounding box, defined osmdata function opq(): following sub-section provides detail bounding boxes. Following initial opq() call, osmdata queries built adding one ‘features’, specified terms key-value pairs. example, paths, ways, roads designated OSM key=highway, query motorways greater London (UK) can constructed follows: detailed description features provided OSM wiki, osmdata function available_features() can used retrieve comprehensive list feature keys currently used OSM. two primary osmdata functions obtaining data query: osmdata_sf() osmdata_sp(), return data Simple Features (sf) Spatial (sp) formats, respectively. typical workflow extracting OSM data osmdata thus consists three lines: return object (x) described third section .","code":"install.packages(\"osmdata\") library(osmdata) ## Data (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright remotes::install_github('ropensci/osmdata') q <- opq(bbox = c(51.1, 0.1, 51.2, 0.2)) q <- opq(bbox = 'greater london uk') %>%     add_osm_feature(key = 'highway', value = 'motorway') head (available_features ()) ## [1] \"4wd only\"  \"abandoned\" \"abutters\"  \"access\"    \"addr\"      \"addr:city\" x <- opq(bbox = 'greater london uk') %>%     add_osm_feature(key = 'highway', value = 'motorway') %>%     osmdata_sf ()"},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata.html","id":"bounding-boxes-the-getbb-function","dir":"Articles","previous_headings":"1. Introduction","what":"1.1 Bounding boxes: the getbb() function","title":"1. osmdata","text":"bounding boxes may explicitly specified opq() function, commonly obtained getbb() function, accepts character strings. illustrated example, opq() function also accepts character strings, simply passed directly getbb() convert rectangular bounding boxes. Note text string case sensitive, illustrated following code: Note also getbb() can return data frame reporting multiple matches matrices representing bounding polygons matches: overpass API accepts simple rectangular bounding boxes, data requested bounding polygon actually data within corresponding rectangular bounding box, data may subsequently trimmed within polygon trim_osmdata() function, demonstrated code immediately . highways within polygonal boundary Greater London can extracted , See ?trim_osmdata() ways obtain polygonally bounded sets OSM data. getbb() function also allows specification explicit featuretype, street, city, county, state, country. default value settlement combines results country streets. See ?getbb details.","code":"bb <- getbb('Greater London, U.K.') q <- opq(bbox = bb) identical(q, opq(bbox = 'greater london uk')) ## TRUE bb_df <- getbb(place_name = \"london\", format_out = \"data.frame\") bb_poly <- getbb(place_name = \"london\", format_out = \"polygon\") bb <- getbb ('london uk', format_out = 'polygon') x <- opq(bbox = bb) %>%     add_osm_feature(key = 'highway', value = 'motorway') %>%     osmdata_sf () %>%     trim_osmdata (bb)"},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata.html","id":"the-overpass-api","dir":"Articles","previous_headings":"","what":"2. The overpass API","title":"1. osmdata","text":"mentioned, osmdata obtains OSM data overpass API, read-API serves custom selected parts OSM map data. syntax overpass queries powerful yet hard learn. section briefly introduces structure overpass queries order help construct efficient powerful queries. wanting skip straight onto query construction osmdata may safely jump ahead query example . osmdata simplifies queries OSM data can extracted little understanding overpass query syntax, although still possible submit arbitrarily complex overpass queries via osmdata. excellent place explore overpass queries specifically OSM data general online interactive query builder overpass-turbo, includes helpful corrector function incorrectly formatted queries. Examples functionality action can found OpenStreetMap wiki, full details overpass query language given Query Language Guide well overpass API Language Guide. default, osmdata sends queries one four main overpass server instances, https://overpass-api.de/api/interpreter servers listed page linked can used, thanks functions get set base url: osmdata queries lists class overpass_query. actual query passed overpass API query can obtained function opq_string(). Applied preceding query, function gives: resultant output may pasted directly overpass-turbo online interactive query builder. (output opq_string somewhat reformatted reflect format typically used overpass-turbo.)","code":"get_overpass_url() ## [1] \"https://overpass-api.de/api/interpreter\" new_url <- \"https://overpass.openstreetmap.ie/api/interpreter\" set_overpass_url(new_url) # reset the base url (not run) opq_string(q) ## [out:xml][timeout:25]; ## ( ##   node ##     [\"highway\"=\"motorway\"] ##     (51.2867602,-0.510375,51.6918741,0.3340155); ##   way ##     [\"highway\"=\"motorway\"] ##     (51.2867602,-0.510375,51.6918741,0.3340155); ##   relation ##     [\"highway\"=\"motorway\"] ##     (51.2867602,-0.510375,51.6918741,0.3340155); ## ); ## (._;>);out body;"},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata.html","id":"osmdata-queries","dir":"Articles","previous_headings":"2. The overpass API","what":"2.1. osmdata queries","title":"1. osmdata","text":"demonstrated , osmdata query begins specifying bounding box function opq(), followed specifying desired OSM features add_osm_feature(). query request natural water water bodies Kunming, China. particular water body may requested appending call add_osm_feature(): successive call add_osm_feature() adds features query. query thus request bodies natural water English names include ‘Dian’. requested data may extracted calling one osmdata_xml/sp/sf() functions. Single queries always constructed adding features, therefore correspond logical operations: natural water bodies whose names include ‘Dian’. equivalent combination can extracted add_osm_features() function. following query represents -equivalent query, requesting data natural features value \"water\" features whose English name \"Dian\". Note \"=\" symbols requests features whose values exactly match given values. “filter” symbols possible, described overpass query language definition, including symbols negation (!=), approximate matching (~). Passing query osmdata_sf() return identical data following way explicitly construct query using inbuilt c operator osmdata. “filter” symbols may explicitly specified add_osm_features() function, single-feature version add_osm_feature() function several logical parameters control matching without needing remember precise overpass syntax: key_exact can set FALSE approximately match given keys; value_exact can set FALSE approximately match given values; match_case can set FALSE match keys values lower upper case forms. previous query key = 'name:end' value = 'Dian' thus replaced following:","code":"q <- opq(bbox = 'Kunming, China') %>%     add_osm_feature(key = 'natural', value = 'water') q <- opq(bbox = 'Kunming, China') %>%     add_osm_feature(key = 'natural', value = 'water') %>%     add_osm_feature(key = 'name:en', value = 'Dian', value_exact = FALSE) q <- opq(bbox = 'Kunming, China') %>%     add_osm_features(features = c (\"\\\"natural\\\"=\\\"water\\\"\",                                    \"\\\"name:en\\\"=\\\"Dian\\\"\")) dat1 <- opq(bbox = 'Kunming, China') %>%     add_osm_feature(key = 'natural', value = 'water') %>%     osmdata_sf () dat2 <- opq(bbox = 'Kunming, China') %>%     add_osm_feature(key = 'name:en', value = 'Dian', value_exact = FALSE) %>%     osmdata_sf () dat <- c (dat1, dat2) add_osm_feature(key = 'name', value = 'dian',                 key_exact = FALSE,                 value_exact = FALSE,                 match_case = FALSE)"},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata.html","id":"extracting-osm-data-from-a-query","dir":"Articles","previous_headings":"2. The overpass API","what":"2.2 Extracting OSM data from a query","title":"1. osmdata","text":"primary osmdata functions osmdata_sf() osmdata_sp() pass queries overpass return OSM data corresponding sf sp format, respectively. functions also accept direct overpass queries, produced osmdata function opq_string(), copied directly overpass-turbo query builder. Note result contains value bbox, information lost full osmdata_query, q, converted string. Nevertheless, results two calls osmdata_sf (opq_string (q)) osmdata_sf (q) differ values bbox timestamp, returning otherwise identical data. summary, osmdata queries generally simplified versions potentially complex overpass queries, although arbitrarily complex overpass queries may passed directly primary osmdata functions. illustrated , osmdata queries generally constructed initiating query opq(), specifying OSM features terms key-value pairs add_osm_feature(), along judicious usage key_exact, value_exact, match_case parameters. simplest way use osmdata simply request data within given bounding box (warning - intended run): Queries , however, usually useful refined using add_osm_feature(), minimally requires single key returns objects specifying value key: osmdata use query return named highways within requested bounding box. Note key specifications requests features must include keys, yet features also include many keys, thus osmdata objects generally list large number distinct keys, demonstrated .","code":"osmdata_sf(opq_string(q)) ## Object of class 'osmdata' with: ##                  $bbox : ##         $overpass_call : The call submitted to the overpass API ##             $timestamp : [ Thurs 5 May 2017 14:33:54 ] ##            $osm_points : 'sf' Simple Features Collection with 360582 points ##            ... q <- opq(bbox = 'London City, U.K.') lots_of_data <- osmdata_sf(q) not_so_much_data <- opq(bbox = 'city of london uk') %>%     add_osm_feature(key = 'highway') %>%     add_osm_feature(key = 'name') %>%     osmdata_sf()"},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata.html","id":"query-example","dir":"Articles","previous_headings":"2. The overpass API","what":"2.3. Query example","title":"1. osmdata","text":"appreciate query building concrete terms, let’s imagine wanted find cycle paths Seville, Spain:  Now imagine want make specific query extracts designated cycleways bridges. Combining one query return designated cycleways bridges: query returns 99 points 32 lines. Designed cycleways bridges can obtained simply combining multiple osmdata objects c operator: expected, operation produces data equivalent , showing utility combining osmdata objects generic function c().","code":"q1 <- opq('Sevilla') %>%     add_osm_feature(key = 'highway', value = 'cycleway') cway_sev <- osmdata_sp(q1) sp::plot(cway_sev$osm_lines) des_bike <- osmdata_sf(q1) q2 <- add_osm_feature(q1, key = 'bridge', value = 'yes') des_bike_and_bridge <- osmdata_sf(q2) nrow(des_bike_and_bridge$osm_points); nrow(des_bike_and_bridge$osm_lines) ## [1] 99 ## [1] 32 q2 <- opq('Sevilla') %>%     add_osm_feature(key = 'bridge', value = 'yes') bridge <- osmdata_sf(q2) des_bike_or_bridge <- c(des_bike, bridge) nrow(des_bike_or_bridge$osm_points); nrow(des_bike_or_bridge$osm_lines) ## [1] 9757 ## [1] 1061"},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata.html","id":"the-osmdata-object","dir":"Articles","previous_headings":"","what":"3. The osmdata object","title":"1. osmdata","text":"osmdata extraction functions (osmdata_sf() osmdata_sp()), return objects class osmdata. structure osmdata objects clear default print method, illustrated using bridge example previous section: results show, osmdata objects contain: bounding box (can accessed bridge$bbox) time-stamp query (bridge$timestamp, useful checking data --date) spatial data, consisting osm_points, osm_lines, osm_polygons, osm_multilines osm_multipolygons. can empty: example printed contains points lines. complex features osm_multilines osm_multipolygons refer OSM relations contain multiple lines polygons. actual spatial data contained osmdata object either sp format extracted osmdata_sp() sf format extracted osmdata_sf(). addition two functions, osmdata provides third function, osmdata_xml(), allows raw OSM data returned optionally saved disk XML format. following code demonstrates function, beginning new query. call returns data object dat saves file buildings.osm. Downloaded XML data can converted sf sp formats simply passing data respective osmdata functions, either name file XML object: following sub-sections now explore three functions detail, beginning osmdata_xml().","code":"bridge ##  Object of class 'osmdata' with: ##                   $bbox : 37.3002036,-6.0329182,37.4529579,-5.819157 ##          $overpass_call : The call submitted to the overpass API ##              $timestamp : [ Thurs 5 May 2017 14:41:19 ] ##             $osm_points : 'sf' Simple Features Collection with 69 points ##              $osm_lines : 'sf' Simple Features Collection with 25 linestrings ##           $osm_polygons : 'sf' Simple Features Collection with 0 polygons ##         $osm_multilines : 'sf' Simple Features Collection with 0 multilinestrings ##      $osm_multipolygons : 'sf' Simple Features Collection with 0 multipolygons class(osmdata_sf(q)$osm_lines) ## [1] \"sf\"         \"data.frame\" class(osmdata_sp(q)$osm_lines) ## [1] \"SpatialLinesDataFrame\" ## attr(,\"package\") ## [1] \"sp\" dat <- opq(bbox = c(-0.12, 51.51, -0.11, 51.52)) %>%     add_osm_feature(key = 'building') %>%     osmdata_xml(file = 'buildings.osm') class(dat) ## [1] \"xml_document\" \"xml_node\" q <- opq(bbox = c(-0.12, 51.51, -0.11, 51.52)) %>%     add_osm_feature(key = 'building') doc <- osmdata_xml(q, 'buildings.osm') dat1 <- osmdata_sf(q, doc) dat2 <- osmdata_sf(q, 'buildings.osm') identical(dat1, dat2) ## [1] TRUE"},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata.html","id":"the-osmdata_xml-function","dir":"Articles","previous_headings":"3. The osmdata object","what":"3.1. The osmdata_xml() function","title":"1. osmdata","text":"osmdata_xml() returns OSM data native XML format, also allows data saved directly disk (conventionally using file suffix .osm, although suffix may used). XML data formatting using R package xml2, may processed within R using methods compatible data, may processed software able load XML data directly disk. first lines XML data downloaded look like : data can used programs able read process XML data, open source GIS QGIS OSM data editor JOSM. remainder vignette assumes want get OSM data using R, also want import eventually process , using R. ’ll need import data native R class. demonstrated , downloaded data can directly processed passing either filenames R objects containing data osmdata_sf/sp() functions:","code":"readLines('buildings.osm')[1:6] ## [1] \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\" ## [2] \"<osm version=\\\"0.6\\\" generator=\\\"Overpass API\\\">\" ## [3] \"  <note>The data included in this document is from www.openstreetmap.org. The data is made available under ODbL.<\/note>\" ## [4] \"  <meta osm_base=\\\"2017-03-07T09:28:03Z\\\"/>\" ## [5] \"  <node id=\\\"21593231\\\" lat=\\\"51.5149566\\\" lon=\\\"-0.1134203\\\"/>\" ## [6] \"  <node id=\\\"25378129\\\" lat=\\\"51.5135870\\\" lon=\\\"-0.1115193\\\"/>\" dat_sp <- osmdata_sp(q, 'buildings.osm') dat_sf <- osmdata_sf(q, 'buildings.osm')"},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata.html","id":"the-osmdata_sf-function","dir":"Articles","previous_headings":"3. The osmdata object","what":"3.2. The osmdata_sf() function","title":"1. osmdata","text":"osmdata_sf() returns OSM data Simple Features (SF) format, defined Open Geospatial Consortium, implemented R package sf. package provides direct interface C++ Graphical Data Abstraction Library (GDAL) also includes -called ‘driver’ OSM data. means OSM data may also read directly sf, rather using osmdata. case, data must first saved disk, can readily achieved using osmdata_xml() described , downloading directly overpass interactive query builder. following example based query: sf can read data independent osmdata though: GDAL drivers used sf can load single ‘layers’ features, example, points, lines, polygons. contrast, osmdata loads features simultaneously: Even spatial objects type (‘layers’ sf terminology), osmdata returns considerably objects–7,166 points compared .just 38. raw sizes data returned can compared : osmdata points contain 500 times much data. primary difference sf/GDAL osmdata former returns objects unique category spatial object. Thus OSM nodes (points sf/osmdata representations) include, sf/GDAL representation, points part objects (lines polygons). contrast, osm_points object returned osmdata includes points regardless whether represented spatial objects. Similarly, line objects sf/GDAL exclude lines part objects multipolygon multiline objects. processing data sf/GDAL two important implications: implicit hierarchy spatial objects enforced including elements objects ‘highest’ level representation, multipolygon multiline objects assumed ‘higher’ levels polyon line objects, turn ‘higher’ levels point objects. osmdata makes hierarchical assumptions. OSM structured giving object unique identifier components given object (nodes line, example, lines multipolygon) can described simply giving identifiers. enables components OSM object examined detail. sf/GDAL representation obviates ability removing IDs reducing everything geometries alone (, , called ‘Simple Features’). means, example, key-value pairs line polygon components multipolygon can never extracted sf/GDAL representation. contrast, osmdata retains unique identifiers OSM objects, readily enables, example, properties point objects line extracted. Another reason osmdata returns data GDAL/sf latter extracts restricted list OSM keys, whereas osmdata returns key fields present requested data: key fields specified given set OSM data returned osmdata, GDAL/sf returns key fields regardless whether values specified. key=address contains data yet still returned GDAL/sf. Finally, note osmdata generally extract OSM data considerably faster equivalent sf/GDAL routines (detailed ).","code":"opq(bbox = 'Trentham, Australia') %>%     add_osm_feature(key = 'name') %>%     osmdata_xml(filename = 'trentham.osm') sf::st_read('trentham.osm', layer = 'points') ## Reading layer `points' from data source `trentham.osm' using driver `OSM' ## Simple feature collection with 38 features and 10 fields ## geometry type:  POINT ## dimension:      XY ## bbox:           xmin: 144.2894 ymin: -37.4846 xmax: 144.3893 ymax: -37.36012 ## epsg (SRID):    4326 ## proj4string:    +proj=longlat +datum=WGS84 +no_defs osmdata_sf(q, 'trentham.osm') ## Object of class 'osmdata' with: ##                  $bbox : -37.4300874,144.2863388,-37.3500874,144.3663388 ##         $overpass_call : The call submitted to the overpass API ##             $timestamp : [ Thus 5 May 2017 14:42:19 ] ##            $osm_points : 'sf' Simple Features Collection with 7106 points ##             $osm_lines : 'sf' Simple Features Collection with 263 linestrings ##          $osm_polygons : 'sf' Simple Features Collection with 38 polygons ##        $osm_multilines : 'sf' Simple Features Collection with 1 multilinestrings ##     $osm_multipolygons : 'sf' Simple Features Collection with 6 multipolygons s1 <- object.size(osmdata_sf(q, 'trentham.osm')$osm_points) s2 <- object.size(sf::st_read('trentham.osm', layer = 'points', quiet = TRUE)) as.numeric(s1 / s2) ## [1] 511.4193 names(sf::st_read('trentham.osm', layer = 'points', quiet = TRUE)) # the keys ## [1] \"osm_id\"     \"name\"       \"barrier\"    \"highway\" ## [5] \"ref\"        \"address\"    \"is_in\"      \"place\" ## [9] \"man_made\"   \"other_tags\" \"geometry\" names(osmdata_sf(q, 'trentham.osm')$osm_points) ## [1] \"osm_id\"           \"name\"             \"X_description_\"   \"X_waypoint_\" ## [5] \"addr.city\"        \"addr.housenumber\" \"addr.postcode\"    \"addr.street\" ## [9] \"amenity\"          \"barrier\"          \"denomination\"     \"foot\" ## [13] \"ford\"             \"highway\"          \"leisure\"          \"note_1\" ## [17] \"phone\"            \"place\"            \"railway\"          \"railway.historic\" ## [21] \"ref\"              \"religion\"         \"shop\"             \"source\" ## [25] \"tourism\"          \"waterway\"         \"geometry\" addr <- sf::st_read('trentham.osm', layer = 'points', quiet = TRUE)$address all(is.na(addr)) ## TRUE"},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata.html","id":"the-osmdata_sp-function","dir":"Articles","previous_headings":"3. The osmdata object","what":"3.3. The osmdata_sp() function","title":"1. osmdata","text":"osmdata_sf() described , OSM data may converted sp format without using osmdata via sf functions demonstrated : data extracted using GDAL, suffer shortcomings mentioned . Note differences amount data returned:","code":"dat <- sf::st_read('buildings.osm', layer = 'multipolygons', quiet = TRUE) dat_sp <- as(dat, 'Spatial') class(dat_sp) ## [1] \"SpatialPolygonsDataFrame\"\\nattr(,\"package\")\\n[1] \"sp\" dim(dat_sp) ## [1] 560  25 dim(osmdata_sp(q, doc = 'buildings.osm')$osm_polygons) ## [1] 566 114 dim(osmdata_sp(q, doc = 'buildings.osm')$osm_multipolygons) ## [1] 15 52"},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata.html","id":"recursive-searching","dir":"Articles","previous_headings":"","what":"4. Recursive searching","title":"1. osmdata","text":"described , osmdata returns data type allows components given spatial object examined right. ability extract, example, points line, polygons include given set points, referred recursive searching. Recursive searching possible GDAL/sf, OSM identifiers removed, unique data type object retained. understand recursive searching useful, note OSM data structured three hierarchical levels: nodes representing spatial points ways representing lines, polygons (connected ends) non-polygonal lines relations representing complex objects generally comprising collections ways /nodes. Examples include multipolygon relations comprising outer polygon (may made several distinct ways ultimately connect form single circle), several inner polygons. Recursive searching allows objects within one hierarchical levels extracted based components level. Recursive searching performed osmdata following functions: osm_points(), extracts point node objects osm_lines(), extracts way objects lines (, polygons) osm_polygons(), extracts polygon objects osm_multilines(), extracts multiline objects; osm_multipolygons(), extracts multipolygon objects. functions accepts argument vector OSM identifiers. demonstrate functions, first re-create example named objects Trentham, Australia:","code":"tr <- opq(bbox = 'Trentham, Australia') %>%     add_osm_feature(key = 'name') %>%     osmdata_sf()"},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata.html","id":"example","dir":"Articles","previous_headings":"4. Recursive searching","what":"4.1. Example","title":"1. osmdata","text":"imagine interested osm_line object describing ‘Coliban River’: locations points line can extracted directly sf object : output contains nothing geometries (, reiterate, ‘Simple Features’), information regarding points can extracted. Coliban River waterfall Trentham, one osm_points objects describes waterfall. information necessary locate waterfall removed GDAL/sf representation, can extracted osmdata following lines, noting OSM ID line coliban given rownames(coliban). point used basis recursive searches. example, multipolygon objects include Trentham Falls extracted : Although returns data case, nevertheless demonstrates usefulness ease recursive searching osmdata.","code":"i <- which(tr$osm_lines$name == 'Coliban River') coliban <- tr$osm_lines[i, ] coliban[which(!is.na(coliban))] ## Simple feature collection with 1 feature and 3 fields ## geometry type:  LINESTRING ## dimension:      XY ## bbox:           xmin: 144.3235 ymin: -37.37162 xmax: 144.3335 ymax: 37.36366 ## epsg (SRID):    4326 ## proj4string:    +proj=longlat +datum=WGS84 +no_defs ##            osm_id          name waterway                       geometry ## 87104907 87104907 Coliban River    river LINESTRING(144.323471069336... coliban$geometry[[1]] ## LINESTRING(144.323471069336 -37.3716201782227, 144.323944091797 -37.3714790344238, 144.324356079102 -37.3709754943848, 144.324493408203 -37.3704833984375, 144.324600219727 -37.370174407959, 144.324981689453 -37.3697204589844, 144.325149536133 -37.369441986084, 144.325393676758 -37.3690567016602, 144.325714111328 -37.3686943054199, 144.326080322266 -37.3682441711426) pts <- osm_points(tr, rownames(coliban)) wf <- pts[which(pts$waterway == 'waterfall'), ] wf[which(!is.na(wf))] ## Simple feature collection with 1 feature and 4 fields ## geometry type:  POINT ## dimension:      XY ## bbox:           xmin: 144.3246 ymin: -37.37017 xmax: 144.3246 ymax: -37.37017 ## epsg (SRID):    4326 ## proj4string:    +proj=longlat +datum=WGS84 +no_defs ##                osm_id           name    tourism  waterway ## 1013064837 1013064837 Trentham Falls attraction waterfall ##                                  geometry ## 1013064837 POINT(144.324600219727 -37.... mp <- osm_multipolygons(tr, rownames(wf))"},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata.html","id":"relation-example","dir":"Articles","previous_headings":"4. Recursive searching","what":"4.2 Relation example","title":"1. osmdata","text":"special type OSM object relation. can defined name, can join many divers features single object. following example extracts London Route Network Route 9, composed many (100) separate lines:","code":"lcnr9 <- opq ('greater london uk') %>%     add_osm_feature (key = \"name\", value = \"LCN 9\",                  value_exact = FALSE) %>%     osmdata_sp() sp::plot(lcnr9$osm_lines)"},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata.html","id":"additional-functionality","dir":"Articles","previous_headings":"","what":"5. Additional Functionality","title":"1. osmdata","text":"section briefly describes additional functions, additional detail provided help files function. trim_osmdata() function, described sub-section bounding boxes, trims osmdata object within defined bounding polygon, rather bounding box. opq_osm_id() function allows queries particular OSM objects OSM-allocated ID values. osm_poly2line() function converts $osm_polygons items osmdata object $osm_lines. objects remain polygonal form, sharing identical start end points, can treated simple lines. important polygonal highways, automatically classified $osm_polygons simply form closed loops. function enables highways grouped together ($osm_lines) regardless form. unique_osmdata() function removes redundant items different components osmdata object. multilinestring, example, composed multiple lines, line composed multiple points. multilinestring, osmdata object thus contain several $osm_lines, several $osm_points. function removes redundant objects, $osm_lines contains lines part higher-level objects, $osm_points contains points part higher-level objects. additional function ability extract data represented OSM database prior specified date, within specified range dates. achieved passing one values opq() function datetime datetime2. resultant data extracted one add_osm_feature() calls extraction function (osmdata_sf/sp/sc/xml) contain data present prior specified date (datetime given), two specified dates (datetime datetime2 given).","code":""},{"path":"https://docs.ropensci.org/osmdata/articles/osmdata.html","id":"related-packages","dir":"Articles","previous_headings":"","what":"6. Related Packages","title":"1. osmdata","text":"Eugster Schlesinger (2012) describe osmar, R package handling OSM data enables visualisation, search even rudimentary routing operations. osmar user friendly able download OSM data flexibly, reported early tutorial comparing R QGIS handling OSM data (Lovelace 2014). Note also osmar package work present, can used accessing OSM data. osmdata builds two previous R packages: osmplotr, package available CRAN accessing plotting OSM data (Padgham 2016) overpass, GitHub package Bob Rudis provides R interface overpass API.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/articles/query-split.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"4. Splitting large queries","text":"osmdata package retrieves data overpass server primarily designed deliver small subsets full Open Street Map (OSM) data set, determined specific bounding coordinates specific OSM key-value pairs. server internal routines limit delivery rates queries excessively large data sets, may ultimately fail large queries. vignette describes one approach breaking overly large queries set smaller queries, re-combining resulting data sets single osmdata object reflecting desired, large query.","code":""},{"path":"https://docs.ropensci.org/osmdata/articles/query-split.html","id":"query-splitting","dir":"Articles","previous_headings":"","what":"2. Query splitting","title":"4. Splitting large queries","text":"Complex data-heavy queries may exhaust time memory limits overpass server. One way get around problem split bounding box (bbox) query several smaller fragments, re-combine data remove duplicate objects. section demonstrates may done, starting large bounding box. following lines divide bounding box two smaller areas: two bounding boxes can used submit two separate overpass queries: retrieved osmdata objects can merged using thec(...) function, automatically removes duplicate objects.","code":"library (osmdata)  bb <- getbb (\"Southeastern Connecticut COG\", featuretype = \"boundary\") bb #>         min       max #> x -72.46677 -71.79315 #> y  41.27591  41.75617 dx <- (bb [\"x\", \"max\"] - bb [\"x\", \"min\"]) / 2  bbs <- list (bb, bb)  bbs [[1]] [\"x\", \"max\"] <- bb [\"x\", \"max\"] - dx bbs [[2]] [\"x\", \"min\"] <- bb [\"x\", \"min\"] + dx  bbs #> [[1]] #>         min       max #> x -72.46677 -72.12996 #> y  41.27591  41.75617 #> #> [[2]] #>         min       max #> x -72.12996 -71.79315 #> y  41.27591  41.75617 res <- list ()  res [[1]] <- opq (bbox = bbs [[1]]) |>     add_osm_feature (key = \"admin_level\", value = \"8\") |>     osmdata_sf () res [[2]] <- opq (bbox = bbs [[2]]) |>     add_osm_feature (key = \"admin_level\", value = \"8\") |>     osmdata_sf () res <- c (res [[1]], res [[2]])"},{"path":"https://docs.ropensci.org/osmdata/articles/query-split.html","id":"automatic-bbox-splitting","dir":"Articles","previous_headings":"","what":"3. Automatic bbox splitting","title":"4. Splitting large queries","text":"previous code demonstrated divide bounding box two, smaller regions. generally possible know advance small bounding box query work, need general version functionality divide bounding box arbitrary number sub-regions. can automate process monitoring exit status opq() |> osmdata_sf() case failed query can keep recursively splitting current bounding box increasingly smaller fragments overpass server returns result. following function demonstrates splitting bounding box list four equal-sized bounding boxes 2--2 grid, box specified degree overlap (eps=0.05, 5%) neighbouring box. pre-split area create queue bounding boxes use submitting queries. Now can create loop monitor exit status query case success remove bounding box queue. query fails reason, split failed bounding box four smaller fragments add queue, repeating results successfully delivered. retrieved osmdata objects stored result list can combined using c(...) operator. Note large datasets process can quite time consuming.","code":"split_bbox <- function (bbox, grid = 2, eps = 0.05) {     xmin <- bbox [\"x\", \"min\"]     ymin <- bbox [\"y\", \"min\"]     dx <- (bbox [\"x\", \"max\"] - bbox [\"x\", \"min\"]) / grid     dy <- (bbox [\"y\", \"max\"] - bbox [\"y\", \"min\"]) / grid      bboxl <- list ()      for (i in 1:grid) {         for (j in 1:grid) {             b <- matrix (c (                 xmin + ((i - 1 - eps) * dx),                 ymin + ((j - 1 - eps) * dy),                 xmin + ((i + eps) * dx),                 ymin + ((j + eps) * dy)             ),             nrow = 2,             dimnames = dimnames (bbox)             )              bboxl <- append (bboxl, list (b))         }     }     bboxl } bb <- getbb (\"Connecticut\", featuretype = NULL) queue <- split_bbox (bb) result <- list () while (length (queue) > 0) {      print (queue [[1]])      opres <- NULL     opres <- try ({         opq (bbox = queue [[1]], timeout = 25) |>             add_osm_feature (key = \"natural\", value = \"tree\") |>             osmdata_sf ()     })      if (class (opres) [1] != \"try-error\") {         result <- append (result, list (opres))         queue <- queue [-1]     } else {         bboxnew <- split_bbox (queue [[1]])         queue <- append (bboxnew, queue [-1])     } } final <- do.call (c, result)"},{"path":"https://docs.ropensci.org/osmdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Padgham. Author, maintainer. Bob Rudis. Author. Robin Lovelace. Author. Maëlle Salmon. Author. Joan Maspons. Author. Andrew Smith. Contributor. James Smith. Contributor. Andrea Gilardi. Contributor. Enrico Spinielli. Contributor. Anthony North. Contributor. Martin Machyna. Contributor. Marcin Kalicinski. Contributor, copyright holder.           Author included RapidXML code Eli Pousson. Contributor.","code":""},{"path":"https://docs.ropensci.org/osmdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mark Padgham, Bob Rudis, Robin Lovelace, Maëlle Salmon (2017). “osmdata.” Journal Open Source Software, 2(14), 305. doi:10.21105/joss.00305, https://joss.theoj.org/papers/10.21105/joss.00305.","code":"@Article{,   title = {osmdata},   author = {{Mark Padgham} and {Bob Rudis} and {Robin Lovelace} and {Maëlle Salmon}},   journal = {Journal of Open Source Software},   year = {2017},   volume = {2},   number = {14},   pages = {305},   month = {jun},   publisher = {The Open Journal},   url = {https://joss.theoj.org/papers/10.21105/joss.00305},   doi = {10.21105/joss.00305}, }"},{"path":"https://docs.ropensci.org/osmdata/index.html","id":"osmdata-","dir":"","previous_headings":"","what":"Import OpenStreetMap Data as Simple Features or Spatial Objects","title":"Import OpenStreetMap Data as Simple Features or Spatial Objects","text":"osmdata R package accessing data underlying OpenStreetMap (OSM), delivered via Overpass API. (packages OpenStreetMap can used download raster tiles based OSM data.) Overpass read-API extracts custom selected parts OSM data. Data can returned variety formats, including Simple Features (sf), Spatial (sp), Silicate (sc) objects. package designed allow access small--medium-sized OSM datasets (see osmextract approach reading-bulk OSM data extracts).","code":""},{"path":"https://docs.ropensci.org/osmdata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Import OpenStreetMap Data as Simple Features or Spatial Objects","text":"install latest CRAN version: Alternatively, install development version one following options: load package check version:","code":"install.packages (\"osmdata\") # install.packages(\"remotes\") remotes::install_git (\"https://git.sr.ht/~mpadge/osmdata\") remotes::install_bitbucket (\"mpadge/osmdata\") remotes::install_gitlab (\"mpadge/osmdata\") remotes::install_github (\"ropensci/osmdata\") library (osmdata) #> Data (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright packageVersion (\"osmdata\") #> [1] '0.2.5.16'"},{"path":"https://docs.ropensci.org/osmdata/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Import OpenStreetMap Data as Simple Features or Spatial Objects","text":"Overpass API queries can built base query constructed opq followed add_osm_feature. corresponding OSM objects downloaded converted Simple Feature (sf) objects osmdata_sf(), Spatial (sp) objects osmdata_sp() Silicate (sc) objects osmdata_sc(). example, OSM data can also downloaded OSM XML format osmdata_xml() saved use software.","code":"x <- opq (bbox = c (-0.27, 51.47, -0.20, 51.50)) %>% # Chiswick Eyot in London, U.K.     add_osm_feature (key = \"name\", value = \"Thames\", value_exact = FALSE) %>%     osmdata_sf () x #> Object of class 'osmdata' with: #>                  $bbox : 51.47,-0.27,51.5,-0.2 #>         $overpass_call : The call submitted to the overpass API #>                  $meta : metadata including timestamp and version numbers #>            $osm_points : 'sf' Simple Features Collection with 24548 points #>             $osm_lines : 'sf' Simple Features Collection with 2219 linestrings #>          $osm_polygons : 'sf' Simple Features Collection with 33 polygons #>        $osm_multilines : 'sf' Simple Features Collection with 6 multilinestrings #>     $osm_multipolygons : 'sf' Simple Features Collection with 3 multipolygons osmdata_xml(q1, \"data.osm\")"},{"path":"https://docs.ropensci.org/osmdata/index.html","id":"bounding-boxes","dir":"","previous_headings":"Usage","what":"Bounding Boxes","title":"Import OpenStreetMap Data as Simple Features or Spatial Objects","text":"osmdata queries begin bounding box defining area query. getbb() function can used extract bounding boxes specified place names. next step convert overpass query object opq() function: also possible use bounding polygons rather rectangular boxes:","code":"getbb (\"astana kazakhstan\") #>        min      max #> x 71.21797 71.78519 #> y 50.85761 51.35111 q <- opq (getbb (\"astana kazakhstan\")) q <- opq (\"astana kazakhstan\") # identical result b <- getbb (\"bangalore\", format_out = \"polygon\") class (b) #> [1] \"matrix\" \"array\" head (b [[1]]) #> [1] 77.46005"},{"path":"https://docs.ropensci.org/osmdata/index.html","id":"features","dir":"","previous_headings":"Usage","what":"Features","title":"Import OpenStreetMap Data as Simple Features or Spatial Objects","text":"next step define features interest using add_osm_feature() function. function accepts key value parameters specifying desired features OSM key-vale schema. Multiple add_osm_feature() calls may combined illustrated , result logical operation, thus returning amenities labelled restaurants also pubs: Features can also requested key , case features values specified key returned: key-queries can, however, translate requesting large data sets, generally avoided favour precise key-value specifications. Negation can also specified pre-pending exclamation mark following requests amenities labelled restaurants labelled pubs: Additional arguments allow refined matching, following request pubs “irish” name: Logical combinations can constructed using separate add_osm_features() function. first examples requests features restaurants pubs. following query request data restaurants pubs: vector features contains key-value pairs separated overpass “filter” symbol =, !=, ~. key value must enclosed escape-delimited quotations shown . Full lists available features corresponding tags available functions ?available_features ?available_tags.","code":"q <- opq (\"portsmouth usa\") %>%     add_osm_feature (key = \"amenity\", value = \"restaurant\") %>%     add_osm_feature (key = \"amenity\", value = \"pub\") # There are none of these q <- opq (\"portsmouth usa\") %>%     add_osm_feature (key = \"amenity\") q <- opq (\"portsmouth usa\") %>%     add_osm_feature (key = \"amenity\", value = \"!restaurant\") %>%     add_osm_feature (key = \"amenity\", value = \"!pub\") # There are a lot of these q <- opq (\"washington dc\") %>%     add_osm_feature (key = \"amenity\", value = \"pub\") %>%     add_osm_feature (         key = \"name\", value = \"irish\",         value_exact = FALSE, match_case = FALSE     ) q <- opq (\"portsmouth usa\") %>%     add_osm_features (features = c (         \"\\\"amenity\\\"=\\\"restaurant\\\"\",         \"\\\"amenity\\\"=\\\"pub\\\"\"     ))"},{"path":"https://docs.ropensci.org/osmdata/index.html","id":"data-formats","dir":"","previous_headings":"Usage","what":"Data Formats","title":"Import OpenStreetMap Data as Simple Features or Spatial Objects","text":"overpass query constructed opq() add_osm_feature() functions sent overpass server request data. data may returned variety formats, currently including: XML data (downloaded locally) via osmdata_xml(); Simple Features (sf) format via osmdata_sf(); R Spatial (sp) format via osmdata_sp(); Silicate (SC) format via osmdata_sc(); data.frame format via osmdata_data_frame().","code":""},{"path":"https://docs.ropensci.org/osmdata/index.html","id":"additional-functionality","dir":"","previous_headings":"Usage","what":"Additional Functionality","title":"Import OpenStreetMap Data as Simple Features or Spatial Objects","text":"Data may also trimmed within defined polygonal shape trim_osmdata() function. Full package functionality described website","code":""},{"path":"https://docs.ropensci.org/osmdata/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Import OpenStreetMap Data as Simple Features or Spatial Objects","text":"","code":"citation (\"osmdata\") #> To cite osmdata in publications use: #>  #>   Mark Padgham, Bob Rudis, Robin Lovelace, Maëlle Salmon (2017). #>   \"osmdata.\" _Journal of Open Source Software_, *2*(14), 305. #>   doi:10.21105/joss.00305 <https://doi.org/10.21105/joss.00305>, #>   <https://joss.theoj.org/papers/10.21105/joss.00305>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {osmdata}, #>     author = {{Mark Padgham} and {Bob Rudis} and {Robin Lovelace} and {Maëlle Salmon}}, #>     journal = {Journal of Open Source Software}, #>     year = {2017}, #>     volume = {2}, #>     number = {14}, #>     pages = {305}, #>     month = {jun}, #>     publisher = {The Open Journal}, #>     url = {https://joss.theoj.org/papers/10.21105/joss.00305}, #>     doi = {10.21105/joss.00305}, #>   }"},{"path":"https://docs.ropensci.org/osmdata/index.html","id":"data-licensing","dir":"","previous_headings":"","what":"Data licensing","title":"Import OpenStreetMap Data as Simple Features or Spatial Objects","text":"data access using osmdata licensed OpenStreetMap’s license, Open Database Licence. derived data products must also carry licence. make sure understand licence publishing derived datasets.","code":""},{"path":"https://docs.ropensci.org/osmdata/index.html","id":"other-approaches","dir":"","previous_headings":"","what":"Other approaches","title":"Import OpenStreetMap Data as Simple Features or Spatial Objects","text":"osmextract R package downloading importing compressed ‘extracts’ OSM data covering large areas (e.g. roads country). package represents data sf format , allows single “layer” (points, lines, polygons) read one time. nevertheless recommended osmdata large queries single layers, relationships layers important. osmapiR R interface OpenStreetMap API v0.6 fetching saving raw geodata /OpenStreetMap database. package allows access OSM maps data well map notes, GPS traces, changelogs, users data. osmapiR enables editing exploring history OSM objects, intended access OSM map data purposes (unlike osmdata osmextract packages).","code":""},{"path":"https://docs.ropensci.org/osmdata/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Import OpenStreetMap Data as Simple Features or Spatial Objects","text":"Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/osmdata/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Import OpenStreetMap Data as Simple Features or Spatial Objects","text":"contributions project gratefully acknowledged using allcontributors package following -contributors specification. Contributions kind welcome!","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/paper.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"osmdata imports OpenStreetMap (OSM) data R either Simple Features R Spatial objects, respectively able processed R packages sf sp. OSM data extracted Overpass API processed fast C++ routines return R. package enables simple Overpass queries constructed without user necessarily understanding syntax Overpass query language, retaining ability handle arbitrarily complex queries. Functions also provided enable recursive searching different kinds OSM data (example, find lines intersect given point). package faster current alternatives importing OSM data R one compatible sf.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/add_osm_feature.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a feature to an Overpass query — add_osm_feature","title":"Add a feature to an Overpass query — add_osm_feature","text":"Add feature Overpass query","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/add_osm_feature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a feature to an Overpass query — add_osm_feature","text":"","code":"add_osm_feature(   opq,   key,   value,   key_exact = TRUE,   value_exact = TRUE,   match_case = TRUE,   bbox = NULL )"},{"path":"https://docs.ropensci.org/osmdata/reference/add_osm_feature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a feature to an Overpass query — add_osm_feature","text":"opq overpass_query object key feature key; can negated initial exclamation mark, key = \"!\", can also vector value missing. value value feature key; can negated initial exclamation mark, value = \"!\", can also vector, value = c (\"\", \"\"). key_exact FALSE, key interpreted exactly; see https://wiki.openstreetmap.org/wiki/Overpass_API value_exact FALSE, value interpreted exactly match_case FALSE, matching key value sensitive case bbox optional bounding box feature query; must set opq query bbox set","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/add_osm_feature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a feature to an Overpass query — add_osm_feature","text":"opq object","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/add_osm_feature.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add a feature to an Overpass query — add_osm_feature","text":"key_exact generally TRUE, OSM uses reasonably well defined set possible keys, returned available_features. Setting key_exact = FALSE allows matching regular expressions OSM keys, described Section 6.1.5 https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL. actual query submitted overpass API can obtained opq_string.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/add_osm_feature.html","id":"add-osm-feature-vs-add-osm-features","dir":"Reference","previous_headings":"","what":"add_osm_feature vs add_osm_features","title":"Add a feature to an Overpass query — add_osm_feature","text":"Features defined within add_osm_features call combined logical . Chained calls either add_osm_feature add_osm_features() combines features calls logical ; analagous chaining dplyr::filter() data frame. add_osm_features() one feature logically equivalent add_osm_feature().","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/add_osm_feature.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add a feature to an Overpass query — add_osm_feature","text":"https://wiki.openstreetmap.org/wiki/Map_Features","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/add_osm_feature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a feature to an Overpass query — add_osm_feature","text":"","code":"if (FALSE) { # \\dontrun{ q <- opq (\"portsmouth usa\") %>%     add_osm_feature (         key = \"amenity\",         value = \"restaurant\"     ) %>%     add_osm_feature (key = \"amenity\", value = \"pub\") osmdata_sf (q) # all objects that are restaurants AND pubs (there are none!) q1 <- opq (\"portsmouth usa\") %>%     add_osm_feature (         key = \"amenity\",         value = \"restaurant\"     ) q2 <- opq (\"portsmouth usa\") %>%     add_osm_feature (key = \"amenity\", value = \"pub\") c (osmdata_sf (q1), osmdata_sf (q2)) # all restaurants OR pubs # Use of negation to extract all non-primary highways q <- opq (\"portsmouth uk\") %>%     add_osm_feature (key = \"highway\", value = \"!primary\")  # key negation without warnings q3 <- opq (\"Vinçà\", osm_type=\"node\") %>%     add_osm_feature (key = c(\"name\", \"!name:ca\")) q4 <- opq (\"el Carxe\", osm_type=\"node\") %>%     add_osm_feature (key = \"natural\", value = \"peak\") %>%     add_osm_feature (key = \"!ele\") } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/add_osm_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Add multiple features to an Overpass query — add_osm_features","title":"Add multiple features to an Overpass query — add_osm_features","text":"Alternative version add_osm_feature creating single queries multiple features. Key-value matching may controlled using filter symbols described https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#By_tag_.28has-kv.29.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/add_osm_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add multiple features to an Overpass query — add_osm_features","text":"","code":"add_osm_features(   opq,   features,   bbox = NULL,   key_exact = TRUE,   value_exact = TRUE )"},{"path":"https://docs.ropensci.org/osmdata/reference/add_osm_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add multiple features to an Overpass query — add_osm_features","text":"opq overpass_query object features named list vector format list(\"<key>\" = \"<value>\") c(\"<key>\" = \"<value>\") character vector key-value pairs keys values enclosed escape-formatted quotations. See examples details. bbox optional bounding box feature query; must set opq query bbox set. key_exact FALSE, key interpreted exactly; see https://wiki.openstreetmap.org/wiki/Overpass_API value_exact FALSE, value interpreted exactly","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/add_osm_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add multiple features to an Overpass query — add_osm_features","text":"opq object","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/add_osm_features.html","id":"add-osm-feature-vs-add-osm-features","dir":"Reference","previous_headings":"","what":"add_osm_feature vs add_osm_features","title":"Add multiple features to an Overpass query — add_osm_features","text":"Features defined within add_osm_features call combined logical . Chained calls either add_osm_feature add_osm_features() combines features calls logical ; analagous chaining dplyr::filter() data frame. add_osm_features() one feature logically equivalent add_osm_feature().","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/add_osm_features.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add multiple features to an Overpass query — add_osm_features","text":"https://wiki.openstreetmap.org/wiki/Map_Features","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/add_osm_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add multiple features to an Overpass query — add_osm_features","text":"","code":"if (FALSE) { # \\dontrun{ q <- opq (\"portsmouth usa\") %>%     add_osm_features (features = list (         \"amenity\" = \"restaurant\",         \"amenity\" = \"pub\"     ))  q <- opq (\"portsmouth usa\") %>%     add_osm_features (features = c (         \"\\\"amenity\\\"=\\\"restaurant\\\"\",         \"\\\"amenity\\\"=\\\"pub\\\"\"     )) # This extracts in a single query the same result as the following: q1 <- opq (\"portsmouth usa\") %>%     add_osm_feature (         key = \"amenity\",         value = \"restaurant\"     ) q2 <- opq (\"portsmouth usa\") %>%     add_osm_feature (key = \"amenity\", value = \"pub\") c (osmdata_sf (q1), osmdata_sf (q2)) # all restaurants OR pubs } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/available_features.html","id":null,"dir":"Reference","previous_headings":"","what":"List recognized features in OSM — available_features","title":"List recognized features in OSM — available_features","text":"List recognized features OSM","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/available_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List recognized features in OSM — available_features","text":"","code":"available_features()"},{"path":"https://docs.ropensci.org/osmdata/reference/available_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List recognized features in OSM — available_features","text":"character vector known features","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/available_features.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"List recognized features in OSM — available_features","text":"requires internet access","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/available_features.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"List recognized features in OSM — available_features","text":"https://wiki.openstreetmap.org/wiki/Map_Features","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/available_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List recognized features in OSM — available_features","text":"","code":"if (FALSE) { # \\dontrun{ available_features () } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/available_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"List tags associated with a feature — available_tags","title":"List tags associated with a feature — available_tags","text":"List tags associated feature","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/available_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List tags associated with a feature — available_tags","text":"","code":"available_tags(feature)"},{"path":"https://docs.ropensci.org/osmdata/reference/available_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List tags associated with a feature — available_tags","text":"feature feature retrieve","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/available_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List tags associated with a feature — available_tags","text":"character vector known tags feature","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/available_tags.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"List tags associated with a feature — available_tags","text":"requires internet access","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/available_tags.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"List tags associated with a feature — available_tags","text":"https://wiki.openstreetmap.org/wiki/Map_Features","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/available_tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List tags associated with a feature — available_tags","text":"","code":"if (FALSE) { # \\dontrun{ available_tags (\"aerialway\") } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/bbox_to_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a named matrix or a named or unnamed vector or data.frame to a string — bbox_to_string","title":"Convert a named matrix or a named or unnamed vector or data.frame to a string — bbox_to_string","text":"function converts bounding box string use web apis","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/bbox_to_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a named matrix or a named or unnamed vector or data.frame to a string — bbox_to_string","text":"","code":"bbox_to_string(bbox)"},{"path":"https://docs.ropensci.org/osmdata/reference/bbox_to_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a named matrix or a named or unnamed vector or data.frame to a string — bbox_to_string","text":"bbox bounding box character, matrix, vector data.frame osm_type osm_id columns. character, bbox found (geocoded) extracted getbb. Unnamed vectors sorted appropriately must merely order (x, y, x, y).","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/bbox_to_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a named matrix or a named or unnamed vector or data.frame to a string — bbox_to_string","text":"character string representing min x, min y, max x, max y bounds. example: \"15.3152361,76.4406446,15.3552361,76.4806446\" bounding box Hampi, India. data.frames OSM objects, character string representing set OSM objects overpass query language. example: \"relation(id:11747082)\" represents area Catalan Countries. set objects can also represented multirow data.frames (e.g. \"relation(id:11747082,307833); way(id:22422490)\").","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/bbox_to_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a named matrix or a named or unnamed vector or data.frame to a string — bbox_to_string","text":"","code":"if (FALSE) { # \\dontrun{ bbox_to_string (getbb (\"València\")) bbox_to_string (getbb (\"València\", format_out = \"data.frame\")) } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/get_overpass_url.html","id":null,"dir":"Reference","previous_headings":"","what":"get_overpass_url — get_overpass_url","title":"get_overpass_url — get_overpass_url","text":"Return URL specified overpass API. Default https://overpass-api.de/api/interpreter/.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/get_overpass_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_overpass_url — get_overpass_url","text":"","code":"get_overpass_url()"},{"path":"https://docs.ropensci.org/osmdata/reference/get_overpass_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_overpass_url — get_overpass_url","text":"overpass API URL","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/getbb.html","id":null,"dir":"Reference","previous_headings":"","what":"Get bounding box for a given place name — getbb","title":"Get bounding box for a given place name — getbb","text":"function uses free Nominatim API provided OpenStreetMap find bounding box (bb) associated place names.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/getbb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get bounding box for a given place name — getbb","text":"","code":"getbb(   place_name,   display_name_contains = NULL,   viewbox = NULL,   format_out = \"matrix\",   base_url = \"https://nominatim.openstreetmap.org\",   featuretype = \"settlement\",   limit = 10,   key = NULL,   silent = TRUE )"},{"path":"https://docs.ropensci.org/osmdata/reference/getbb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get bounding box for a given place name — getbb","text":"place_name name place searching display_name_contains Text string match display_name field returned https://wiki.openstreetmap.org/wiki/Nominatim viewbox bounds searching format_out Character string indicating output format: matrix (default), string (see bbox_to_string()), data.frame ('hits' returned Nominatim), sf_polygon (polygons work sf package), polygon (full polygonal bounding boxes match) osm_type_id ( string quering inside deffined OSM areas bbox_to_string()). base_url Base website data queried featuretype type OSM feature (settlement default; see Note) limit many results API return? key API key use services require silent API printed screen? TRUE default","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/getbb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get bounding box for a given place name — getbb","text":"Defaults matrix form:    min   max x ...   ... y ...   ... format_out = \"polygon\", one two-columns matrices polygonal longitude-latitude points. multiple place_name occurrences found within nominatim, item list coordinates may contain multiple coordinate matrices multiple exact matches exist. one exact match exists potentially multiple polygonal boundaries (example, \"london uk\" exact match, can mean either greater London City London), first returned. See examples illustration. format_out = \"osm_type_id\", character string representing OSM object overpass query language. example: \"relation(id:11747082)\" represents area Catalan Countries. one exact match exists potentially multiple polygonal boundaries, first relation way returned. set objects can also represented multiple results (e.g. relation(id:11747082,307833); way(id:22422490)). See examples illustration. OSM objects can used areas overpass queries must closed rings (ways relations).","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/getbb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get bounding box for a given place name — getbb","text":"inspired functions bbox sp package, bb tmaptools package bb_lookup github package nominatim package, can found https://github.com/hrbrmstr/nominatim. See https://wiki.openstreetmap.org/wiki/Nominatim details.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/getbb.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get bounding box for a given place name — getbb","text":"Specific values featuretype include \"street\", \"city\", https://wiki.openstreetmap.org/wiki/Nominatim details). default featuretype = \"settlement\" combines results intermediate levels \"country\" \"streets\". bounding box polygon city desired, better results usually obtained featuretype = \"city\".","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/getbb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get bounding box for a given place name — getbb","text":"","code":"if (FALSE) { # \\dontrun{ getbb (\"Salzburg\") # select based on display_name, print query url getbb (\"Hereford\", display_name_contains = \"United States\", silent = FALSE) # top 3 matches as data frame getbb (\"Hereford\", format_out = \"data.frame\", limit = 3)  # Examples of polygonal boundaries bb <- getbb (\"london uk\", format_out = \"polygon\") # single match dim (bb [[1]] [[1]]) # matrix of longitude/latitude pairs bb_sf <- getbb (\"kathmandu\", format_out = \"sf_polygon\") # sf:::plot.sf(bb_sf) # can be plotted if sf is installed getbb (\"london\", format_out = \"sf_polygon\") getbb (\"accra\", format_out = \"sf_polygon\") # rectangular bb  area <- getbb (\"València\", format_out = \"osm_type_id\") # select multiple areas with format_out = \"osm_type_id\" areas <- getbb (\"València\", format_out = \"data.frame\") bbox_to_string (areas [areas$osm_type != \"node\", ])  # Using an alternative service (locationiq requires an API key) # add LOCATIONIQ=type_your_api_key_here to .Renviron: key <- Sys.getenv (\"LOCATIONIQ\") if (nchar (key) == 32) {     getbb (place_name,         base_url = \"https://locationiq.org/v1/search.php\",         key = key     ) } } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/opq.html","id":null,"dir":"Reference","previous_headings":"","what":"Build an Overpass query — opq","title":"Build an Overpass query — opq","text":"Build Overpass query","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/opq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build an Overpass query — opq","text":"","code":"opq(   bbox = NULL,   nodes_only = FALSE,   osm_types = c(\"node\", \"way\", \"relation\"),   out = c(\"body\", \"tags\", \"meta\", \"skel\", \"tags center\", \"ids\"),   datetime = NULL,   datetime2 = NULL,   adiff = FALSE,   timeout = 25,   memsize )"},{"path":"https://docs.ropensci.org/osmdata/reference/opq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build an Overpass query — opq","text":"bbox Either () four numeric values specifying maximal minimal longitudes latitudes, form c(xmin, ymin, xmax, ymax) (ii) character string form xmin,ymin,xmax,ymax. passed getbb converted numerical bounding box. Can also (iii) matrix representing bounding polygon returned getbb(..., format_out = \"polygon\"). search area, (iv) character string relation (closed) way id format \"way(id:1)\", \"relation(id:1, 2)\" \"relation(id:1, 2, 3); way(id:2)\" returned getbb(..., format_out = \"osm_type_id\") bbox_to_string data.frame getbb(..., format_out = \"data.frame\") select areas combined (relations ways). nodes_only WARNING: parameter equivalent osm_types = \"node\" DEPRECATED. TRUE, query OSM nodes . OSM structures place = \"city\" highway = \"traffic_signals\" represented nodes . Queries built default return nodes, ways, relation, can inefficient node-queries. Setting value TRUE cases makes queries efficient, data returned osm_points list item. osm_types character vector several OSM types query: node, way relation default. nwr, nw, wr, nr rel also valid types. Ignored nodes_only = TRUE. osm_types = \"node\" equivalent nodes_only = TRUE. level verbosity overpass result: body (geometries tags, default), tags (tags without geometry), meta (like body + Timestamp, Version, Changeset, User, User ID last edition), skel (geometries ), tags center (tags without geometry + coordinates center bounding box) ids (type id objects ). datetime specified, date time extract data OSM database specified date time, described https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#date. must ISO8601 format (\"YYYY-MM-DDThh:mm:ssZ\"), \"T\" \"Z\" characters must present. datetime2 specified, return difference OSM database datetime datetime2, datetime2 > datetime. See https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#Difference_between_two_dates_(diff). adiff TRUE, query augmented difference. result indicates happened modified deleted OSM objects. Requires datetime(2)*. timeout may necessary increase value large queries, server may time data delivered. memsize default memory size 'overpass' server bytes; may need increased order handle large queries.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/opq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build an Overpass query — opq","text":"overpass_query object","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/opq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build an Overpass query — opq","text":"statement tags, tags centerand id, return geometries. Neither = \"meta\" adiff = TRUE options implemented osmdata_* functions yet. Use osmdata_xml osmdata_data_frame get result queries. See documentation statement augmented difference details options.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/opq.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Build an Overpass query — opq","text":"See https://wiki.openstreetmap.org/wiki/Overpass_API#Resource_management_options_.28osm-script.29 explanation timeout memsize (maxsize overpass terms). Note particular comment queries arbitrarily large memsize likely rejected.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/opq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build an Overpass query — opq","text":"","code":"if (FALSE) { # \\dontrun{ q <- getbb (\"portsmouth\", display_name_contains = \"United States\") %>%     opq () %>%     add_osm_feature (\"amenity\", \"restaurant\") %>%     add_osm_feature (\"amenity\", \"pub\") osmdata_sf (q) # all objects that are restaurants AND pubs (there are none!) q1 <- getbb (\"portsmouth\", display_name_contains = \"United States\") %>%     opq () %>%     add_osm_feature (\"amenity\", \"restaurant\") q2 <- getbb (\"portsmouth\", display_name_contains = \"United States\") %>%     opq () %>%     add_osm_feature (\"amenity\", \"pub\") c (osmdata_sf (q1), osmdata_sf (q2)) # all restaurants OR pubs  # Use nodes_only to retrieve single point data only, such as for central # locations of cities. opq <- opq (bbox, nodes_only = TRUE) %>%     add_osm_feature (key = \"place\", value = \"city\") %>%     osmdata_sf (quiet = FALSE)  # Filter by a search area qa1 <- getbb (\"Catalan Countries\", format_out = \"osm_type_id\") %>%     opq (nodes_only = TRUE) %>%     add_osm_feature (key = \"capital\", value = \"4\") opqa1 <- osmdata_sf (qa1) # Filter by a multiple search areas bb <- getbb (\"Vilafranca\", format_out = \"data.frame\") qa2 <- bbox_to_string (bb [bb$osm_type != \"node\", ]) %>%     opq (nodes_only = TRUE) %>%     add_osm_feature (key = \"place\") opqa2 <- osmdata_sf (qa2) } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/opq_around.html","id":null,"dir":"Reference","previous_headings":"","what":"opq_around — opq_around","title":"opq_around — opq_around","text":"Find features around given point, optionally match specific 'key'-'value' pairs. function intended combined add_osm_feature, rather used sequence opq_around -> osmdata_xml (extraction function). See examples use.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/opq_around.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"opq_around — opq_around","text":"","code":"opq_around(lon, lat, radius = 15, key = NULL, value = NULL, timeout = 25)"},{"path":"https://docs.ropensci.org/osmdata/reference/opq_around.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"opq_around — opq_around","text":"lon Longitude desired point lat Latitude desired point radius Radius metres around point data extracted. Queries  large values parameter may fail. key (Optional) OSM key enclosing data value (Optional) OSM value matching 'key' enclosing data timeout may necessary increase value large queries, server may time data delivered.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/opq_around.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"opq_around — opq_around","text":"","code":"if (FALSE) { # \\dontrun{ # Get all benches (\"amenity=bench\") within 100m of a particular point lat <- 53.94542 lon <- -2.52017 key <- \"amenity\" value <- \"bench\" radius <- 100 x <- opq_around (lon, lat, radius, key, value) %>%     osmdata_sf () } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/opq_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform an Overpass query to return the result in a csv format — opq_csv","title":"Transform an Overpass query to return the result in a csv format — opq_csv","text":"Transform Overpass query return result csv format","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/opq_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform an Overpass query to return the result in a csv format — opq_csv","text":"","code":"opq_csv(q, fields, header = TRUE)"},{"path":"https://docs.ropensci.org/osmdata/reference/opq_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform an Overpass query to return the result in a csv format — opq_csv","text":"q opq string object class overpass_query constructed opq alternative opq builders (+ add_osm_feature/s). fields character vector field names. header FALSE, ask column names.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/opq_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform an Overpass query to return the result in a csv format — opq_csv","text":"overpass_query string prefix changed return csv.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/opq_csv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform an Overpass query to return the result in a csv format — opq_csv","text":"output format csv, ask results csv. See CSV output mode details. get data, use osmdata_data_frame.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/opq_csv.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Transform an Overpass query to return the result in a csv format — opq_csv","text":"csv queries reach timeout return 0 row data.frame without warning. Increase timeout q see expected result.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/opq_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform an Overpass query to return the result in a csv format — opq_csv","text":"","code":"if (FALSE) { # \\dontrun{ q <- getbb (\"Catalan Countries\", format_out = \"osm_type_id\") %>%     opq (out = \"tags center\", osm_type = \"relation\", timeout = 100) %>%     add_osm_feature (\"admin_level\", \"7\") %>%     add_osm_feature (\"boundary\", \"administrative\") %>%     opq_csv (fields = c(\"name\", \"::type\", \"::id\", \"::lat\", \"::lon\")) comarques <- osmdata_data_frame (q) # without timeout parameter, 0 rows  qid<- opq_osm_id (     type = \"relation\",     id = c (\"341530\", \"1809102\", \"1664395\", \"343124\"),     out = \"tags\" ) %>%     opq_csv (fields = c (\"name\", \"name:ca\")) cities <- osmdata_data_frame (qid) } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/opq_enclosing.html","id":null,"dir":"Reference","previous_headings":"","what":"opq_enclosing — opq_enclosing","title":"opq_enclosing — opq_enclosing","text":"Find features enclose given point, optionally match specific 'key'-'value' pairs. function intended combined add_osm_feature, rather used sequence opq_enclosing -> opq_string -> osmdata_xml (extraction function). See examples use.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/opq_enclosing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"opq_enclosing — opq_enclosing","text":"","code":"opq_enclosing(   lon = NULL,   lat = NULL,   key = NULL,   value = NULL,   enclosing = \"relation\",   timeout = 25 )"},{"path":"https://docs.ropensci.org/osmdata/reference/opq_enclosing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"opq_enclosing — opq_enclosing","text":"lon Longitude desired point lat Latitude desired point key (Optional) OSM key enclosing data value (Optional) OSM value matching 'key' enclosing data enclosing Either 'relation' 'way' whether return enclosing objects respective types (generally 'relation' correspond multipolygon objects, 'way' polygon objects). timeout may necessary increase value large queries, server may time data delivered.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/opq_enclosing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"opq_enclosing — opq_enclosing","text":"","code":"if (FALSE) { # \\dontrun{ # Get water body surrounding a particular point: lat <- 54.33601 lon <- -3.07677 key <- \"natural\" value <- \"water\" x <- opq_enclosing (lon, lat, key, value) %>%     opq_string () %>%     osmdata_sf () } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/opq_osm_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a feature specified by OSM ID to an Overpass query — opq_osm_id","title":"Add a feature specified by OSM ID to an Overpass query — opq_osm_id","text":"Add feature specified OSM ID Overpass query","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/opq_osm_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a feature specified by OSM ID to an Overpass query — opq_osm_id","text":"","code":"opq_osm_id(   id = NULL,   type = NULL,   open_url = FALSE,   out = \"body\",   datetime = NULL,   datetime2 = NULL,   adiff = FALSE,   timeout = 25,   memsize )"},{"path":"https://docs.ropensci.org/osmdata/reference/opq_osm_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a feature specified by OSM ID to an Overpass query — opq_osm_id","text":"id One official OSM identifiers (long-form integers), must entered either character numeric value (R support long-form integers). id can also character string prefixed id type, e.g. \"relation/11158003\" type Type objects (recycled); must either node, way, relation. Optional id prefixed type. open_url TRUE, open OSM page specified object web browser. Multiple objects (id values) opened multiple pages. level verbosity overpass result: body (geometries tags, default), tags (tags without geometry), meta (like body + Timestamp, Version, Changeset, User, User ID last edition), skel (geometries ), tags center (tags without geometry + coordinates center bounding box) ids (type id objects ). datetime specified, date time extract data OSM database specified date time, described https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#date. must ISO8601 format (\"YYYY-MM-DDThh:mm:ssZ\"), \"T\" \"Z\" characters must present. datetime2 specified, return difference OSM database datetime datetime2, datetime2 > datetime. See https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#Difference_between_two_dates_(diff). adiff TRUE, query augmented difference. result indicates happened modified deleted OSM objects. Requires datetime(2)*. timeout may necessary increase value large queries, server may time data delivered. memsize default memory size 'overpass' server bytes; may need increased order handle large queries.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/opq_osm_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a feature specified by OSM ID to an Overpass query — opq_osm_id","text":"opq object","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/opq_osm_id.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add a feature specified by OSM ID to an Overpass query — opq_osm_id","text":"Extracting elements ID requires explicitly specifying type element. elements one three given types can extracted single query, results multiple types can nevertheless combined c operation osmdata.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/opq_osm_id.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add a feature specified by OSM ID to an Overpass query — opq_osm_id","text":"https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#By_element_id","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/opq_osm_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a feature specified by OSM ID to an Overpass query — opq_osm_id","text":"","code":"if (FALSE) { # \\dontrun{ id <- c (1489221200, 1489221321, 1489221491) dat1 <- opq_osm_id (type = \"node\", id = id) %>%     opq_string () %>%     osmdata_sf () dat1$osm_points # the desired nodes id <- c (136190595, 136190596) dat2 <- opq_osm_id (type = \"way\", id = id) %>%     opq_string () %>%     osmdata_sf () dat2$osm_lines # the desired ways dat <- c (dat1, dat2) # The node and way data combined # All in one (same result as dat) id <- c (1489221200, 1489221321, 1489221491, 136190595, 136190596) type <- c (\"node\", \"node\", \"node\", \"way\", \"way\") datAiO <- opq_osm_id (id = id, type = type) %>%     opq_string () %>%     osmdata_sf () } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/opq_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an overpass query into a text string — opq_string","title":"Convert an overpass query into a text string — opq_string","text":"Convert osmdata query class opq character string query submitted overpass API.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/opq_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an overpass query into a text string — opq_string","text":"","code":"opq_string(opq)"},{"path":"https://docs.ropensci.org/osmdata/reference/opq_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an overpass query into a text string — opq_string","text":"opq overpass_query object","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/opq_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an overpass query into a text string — opq_string","text":"Character string submitted overpass API","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/opq_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an overpass query into a text string — opq_string","text":"","code":"if (FALSE) { # \\dontrun{ q <- opq (\"hampi india\") opq_string (q) } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/osm_elevation.html","id":null,"dir":"Reference","previous_headings":"","what":"osm_elevation — osm_elevation","title":"osm_elevation — osm_elevation","text":"Add elevation data previously-extracted OSM data set, using pre-downloaded global elevation file https://srtm.csi.cgiar.org/srtmdata/. Currently works SC-class objects returned osmdata_sc.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osm_elevation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"osm_elevation — osm_elevation","text":"","code":"osm_elevation(dat, elev_file)"},{"path":"https://docs.ropensci.org/osmdata/reference/osm_elevation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"osm_elevation — osm_elevation","text":"dat SC object produced osmdata_sc. elev_file vector one character strings specifying paths .tif files containing global elevation data.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osm_elevation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"osm_elevation — osm_elevation","text":"modified version input dat additional z_ column appended vertices.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/osm_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all osm_lines from an osmdata object — osm_lines","title":"Extract all osm_lines from an osmdata object — osm_lines","text":"id point object, osm_lines return lines containing point. id line polygon object, osm_lines return lines intersect given line polygon.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osm_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all osm_lines from an osmdata object — osm_lines","text":"","code":"osm_lines(dat, id)"},{"path":"https://docs.ropensci.org/osmdata/reference/osm_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all osm_lines from an osmdata object — osm_lines","text":"dat object class osmdata id OSM identification one objects lines extracted","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osm_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all osm_lines from an osmdata object — osm_lines","text":"sf Simple Features Collection linestrings","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/osm_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract all osm_lines from an osmdata object — osm_lines","text":"","code":"if (FALSE) { # \\dontrun{ dat <- opq (\"hengelo nl\") %>%     add_osm_feature (key = \"highway\") %>%     osmdata_sf () bus <- dat$osm_points [which (dat$osm_points$highway == \"bus_stop\"), ] %>%     rownames () # all OSM IDs of bus stops osm_lines (dat, bus) # all highways containing bus stops  # All lines which intersect with Piccadilly Circus in London, UK dat <- opq (\"Fitzrovia London\") %>%     add_osm_feature (key = \"highway\") %>%     osmdata_sf () i <- which (dat$osm_polygons$name == \"Piccadilly Circus\") id <- rownames (dat$osm_polygons [i, ]) osm_lines (dat, id) } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/osm_multilines.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all osm_multilines from an osmdata object — osm_multilines","title":"Extract all osm_multilines from an osmdata object — osm_multilines","text":"id must osm_points osm_lines object (can id osm_polygons object multilines definition contain polygons.  osm_multilines returns multiline object(s) contain object specified id.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osm_multilines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all osm_multilines from an osmdata object — osm_multilines","text":"","code":"osm_multilines(dat, id)"},{"path":"https://docs.ropensci.org/osmdata/reference/osm_multilines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all osm_multilines from an osmdata object — osm_multilines","text":"dat object class osmdata id OSM identification one objects multilines extracted","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osm_multilines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all osm_multilines from an osmdata object — osm_multilines","text":"sf Simple Features Collection multilines","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/osm_multilines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract all osm_multilines from an osmdata object — osm_multilines","text":"","code":"if (FALSE) { # \\dontrun{ dat <- opq (\"London UK\") %>%     add_osm_feature (key = \"name\", value = \"Thames\", exact = FALSE) %>%     osmdata_sf () # Get ids of lines called \"The Thames\": id <- rownames (dat$osm_lines [which (dat$osm_lines$name == \"The Thames\"), ]) # and find all multilinestring objects which include those lines: osm_multilines (dat, id) # Now note that nrow (dat$osm_multilines) # = 24 multiline objects nrow (osm_multilines (dat, id)) # = 1 - the recursive search selects the # single multiline containing \"The Thames\" } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/osm_multipolygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all osm_multipolygons from an osmdata object — osm_multipolygons","title":"Extract all osm_multipolygons from an osmdata object — osm_multipolygons","text":"id must osm_points, osm_lines, osm_polygons object. osm_multipolygons returns multipolygon object(s) contain object specified id.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osm_multipolygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all osm_multipolygons from an osmdata object — osm_multipolygons","text":"","code":"osm_multipolygons(dat, id)"},{"path":"https://docs.ropensci.org/osmdata/reference/osm_multipolygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all osm_multipolygons from an osmdata object — osm_multipolygons","text":"dat object class osmdata id OSM identification one objects multipolygons extracted","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osm_multipolygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all osm_multipolygons from an osmdata object — osm_multipolygons","text":"sf Simple Features Collection multipolygons","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/osm_multipolygons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract all osm_multipolygons from an osmdata object — osm_multipolygons","text":"","code":"if (FALSE) { # \\dontrun{ # find all multipolygons which contain the single polygon called # \"Chiswick Eyot\" (which is an island). dat <- opq (\"London UK\") %>%     add_osm_feature (key = \"name\", value = \"Thames\", exact = FALSE) %>%     osmdata_sf () index <- which (dat$osm_multipolygons$name == \"Chiswick Eyot\") id <- rownames (dat$osm_polygons [id, ]) osm_multipolygons (dat, id) # That multipolygon is the Thames itself, but note that nrow (dat$osm_multipolygons) # = 14 multipolygon objects nrow (osm_multipolygons (dat, id)) # = 1 - the main Thames multipolygon } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/osm_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all osm_points from an osmdata object — osm_points","title":"Extract all osm_points from an osmdata object — osm_points","text":"Extract osm_points osmdata object","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osm_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all osm_points from an osmdata object — osm_points","text":"","code":"osm_points(dat, id)"},{"path":"https://docs.ropensci.org/osmdata/reference/osm_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all osm_points from an osmdata object — osm_points","text":"dat object class osmdata id OSM identification one objects points extracted","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osm_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all osm_points from an osmdata object — osm_points","text":"sf Simple Features Collection points","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/osm_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract all osm_points from an osmdata object — osm_points","text":"","code":"if (FALSE) { # \\dontrun{ tr <- opq (\"trentham australia\") %>% osmdata_sf () coliban <- tr$osm_lines [which (tr$osm_lines$name == \"Coliban River\"), ] pts <- osm_points (tr, rownames (coliban)) # all points of river # the waterfall point: waterfall <- pts [which (pts$waterway == \"waterfall\"), ] } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/osm_poly2line.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert osmdata polygons into lines — osm_poly2line","title":"Convert osmdata polygons into lines — osm_poly2line","text":"Street networks downloaded add_osm_object(key = \"highway\") store circular highways osm_polygons. function combines osm_lines component yield single sf data.frame highways, whether polygonal .","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osm_poly2line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert osmdata polygons into lines — osm_poly2line","text":"","code":"osm_poly2line(osmdat)"},{"path":"https://docs.ropensci.org/osmdata/reference/osm_poly2line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert osmdata polygons into lines — osm_poly2line","text":"osmdat osmdata object.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osm_poly2line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert osmdata polygons into lines — osm_poly2line","text":"Modified version object osm_polygons objects merged osm_lines.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osm_poly2line.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert osmdata polygons into lines — osm_poly2line","text":"osm_polygons field retained, features also repeated LINESTRING objects osm_lines.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/osm_poly2line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert osmdata polygons into lines — osm_poly2line","text":"","code":"if (FALSE) { # \\dontrun{ dat <- opq (\"colchester uk\") %>%     add_osm_feature (key = \"highway\") %>%     osmdata_sf () # colchester has lots of roundabouts, and these are stored in 'osm_polygons' # rather than 'osm_lines'. The former can be merged with the latter by: dat2 <- osm_poly2line (dat) # 'dat2' will have more lines than 'dat', but the same number of polygons # (they are left unchanged.) } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/osm_polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all osm_polygons from an osmdata object — osm_polygons","title":"Extract all osm_polygons from an osmdata object — osm_polygons","text":"id point object, osm_polygons return polygons containing point. id line polygon object, osm_polygons return polygons intersect given line polygon.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osm_polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all osm_polygons from an osmdata object — osm_polygons","text":"","code":"osm_polygons(dat, id)"},{"path":"https://docs.ropensci.org/osmdata/reference/osm_polygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all osm_polygons from an osmdata object — osm_polygons","text":"dat object class osmdata id OSM identification one objects polygons extracted","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osm_polygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all osm_polygons from an osmdata object — osm_polygons","text":"sf Simple Features Collection polygons","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/osm_polygons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract all osm_polygons from an osmdata object — osm_polygons","text":"","code":"if (FALSE) { # \\dontrun{ # Extract polygons which intersect Conway Street in London dat <- opq (\"Marylebone London\") %>%     add_osm_feature (key = \"highway\") %>%     osmdata_sf () conway <- which (dat$osm_lines$name == \"Conway Street\") id <- rownames (dat$osm_lines [conway, ]) osm_polygons (dat, id) } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata.html","id":null,"dir":"Reference","previous_headings":"","what":"osmdata class def — osmdata","title":"osmdata class def — osmdata","text":"Imports OpenStreetMap (OSM) data R 'sf', 'SC', 'sp', 'data.frame' 'xml_document' objects. OSM data extracted overpass API processed fast C++ routines return R. package enables simple overpass queries constructed without user necessarily understanding syntax overpass query language, retaining ability handle arbitrarily complex queries. Functions also provided enable recursive searching different kinds OSM data (example, find lines intersect given point).","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"osmdata class def — osmdata","text":"","code":"osmdata(   bbox = NULL,   overpass_call = NULL,   meta = NULL,   osm_points = NULL,   osm_lines = NULL,   osm_polygons = NULL,   osm_multilines = NULL,   osm_multipolygons = NULL )"},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"osmdata class def — osmdata","text":"bbox bounding box overpass_call overpass_call meta metadata overpass query, including timestamps version numbers osm_points OSM nodes sf Simple Features Collection points sp SpatialPointsDataFrame osm_lines OSM ways sf Simple Features Collection linestrings sp SpatialLinesDataFrame osm_polygons OSM ways sf Simple Features Collection polygons sp SpatialPolygonsDataFrame osm_multilines OSM relations sf Simple Features Collection multilinestrings sp SpatialLinesDataFrame osm_multipolygons OSM relations sf Simple Features Collection multipolygons sp SpatialPolygonsDataFrame","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"osmdata class def — osmdata","text":"Class constructor never used directly, exported provide access print method","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata.html","id":"functions-to-prepare-queries","dir":"Reference","previous_headings":"","what":"Functions to Prepare Queries","title":"osmdata class def — osmdata","text":"getbb: Get bounding box given place name bbox_to_string: Convert named matrix named vector (unnamed vector) return string overpass_status: Retrieve status overpass API opq: Build overpass query add_osm_feature: Add feature overpass query opq_string: Convert osmdata query overpass API string","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata.html","id":"functions-to-get-additional-osm-information","dir":"Reference","previous_headings":"","what":"Functions to Get Additional OSM Information","title":"osmdata class def — osmdata","text":"available_features: List recognised features OSM available_tags: List tags associated feature","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata.html","id":"functions-to-extract-osm-data","dir":"Reference","previous_headings":"","what":"Functions to Extract OSM Data","title":"osmdata class def — osmdata","text":"osmdata_data_frame: Return OSM data data.frame format osmdata_sc: Return OSM data silicate format osmdata_sf: Return OSM data sf format osmdata_sp: Return OSM data sp format osmdata_xml: Return OSM data xml2 format","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata.html","id":"functions-to-search-data","dir":"Reference","previous_headings":"","what":"Functions to Search Data","title":"osmdata class def — osmdata","text":"osm_points: Extract osm_points objects osm_lines: Extract osm_lines objects osm_polygons: Extract osm_polygons objects osm_multilines: Extract osm_multilines objects osm_multipolygons: Extract osm_multipolygons objects","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"osmdata class def — osmdata","text":"Mark Padgham, Bob Rudis, Robin Lovelace, Maëlle Salmon, Joan Maspons","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Return an OSM Overpass query as a data.frame object. — osmdata_data_frame","title":"Return an OSM Overpass query as a data.frame object. — osmdata_data_frame","text":"Return OSM Overpass query data.frame object.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return an OSM Overpass query as a data.frame object. — osmdata_data_frame","text":"","code":"osmdata_data_frame(q, doc, quiet = TRUE, stringsAsFactors = FALSE)"},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return an OSM Overpass query as a data.frame object. — osmdata_data_frame","text":"q object class overpass_query constructed opq add_osm_feature. May omitted, case attributes data.frame include query. doc missing, doc obtained issuing overpass query, q, otherwise either name file read data, object class xml2 returned osmdata_xml. quiet suppress status messages. stringsAsFactors character strings 'data.frame' coerced factors?","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return an OSM Overpass query as a data.frame object. — osmdata_data_frame","text":"data.frame id, type tags objects query.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_data_frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return an OSM Overpass query as a data.frame object. — osmdata_data_frame","text":"interested geometries results, good option query objects match features forget members ways relations. can achieve passing parameter body = \"tags\" opq.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return an OSM Overpass query as a data.frame object. — osmdata_data_frame","text":"","code":"if (FALSE) { # \\dontrun{ hampi_df <- opq (\"hampi india\") %>%     add_osm_feature (key = \"historic\", value = \"ruins\") %>%     osmdata_data_frame () attr (hampi_df, \"bbox\") attr (hampi_df, \"overpass_call\") attr (hampi_df, \"meta\") } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_sc.html","id":null,"dir":"Reference","previous_headings":"","what":"Return an OSM Overpass query as an osmdata object in silicate (SC) format. — osmdata_sc","title":"Return an OSM Overpass query as an osmdata object in silicate (SC) format. — osmdata_sc","text":"Return OSM Overpass query osmdata object silicate (SC) format.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_sc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return an OSM Overpass query as an osmdata object in silicate (SC) format. — osmdata_sc","text":"","code":"osmdata_sc(q, doc, quiet = TRUE)"},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_sc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return an OSM Overpass query as an osmdata object in silicate (SC) format. — osmdata_sc","text":"q object class overpass_query constructed opq add_osm_feature. May omitted, case osmdata object include query. doc missing, doc obtained issuing overpass query, q, otherwise either name file read data, object class xml2 returned osmdata_xml. quiet suppress status messages.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_sc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return an OSM Overpass query as an osmdata object in silicate (SC) format. — osmdata_sc","text":"object class osmdata_sc representing original OSM hierarchy nodes, ways, relations.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_sc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Return an OSM Overpass query as an osmdata object in silicate (SC) format. — osmdata_sc","text":"silicate format currently highly experimental, recommended use really know .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_sc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return an OSM Overpass query as an osmdata object in silicate (SC) format. — osmdata_sc","text":"","code":"if (FALSE) { # \\dontrun{ hampi_sf <- opq (\"hampi india\") %>%     add_osm_feature (key = \"historic\", value = \"ruins\") %>%     osmdata_sc () } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Return an OSM Overpass query as an osmdata object in sf format. — osmdata_sf","title":"Return an OSM Overpass query as an osmdata object in sf format. — osmdata_sf","text":"Return OSM Overpass query osmdata object sf format.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return an OSM Overpass query as an osmdata object in sf format. — osmdata_sf","text":"","code":"osmdata_sf(q, doc, quiet = TRUE, stringsAsFactors = FALSE)"},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return an OSM Overpass query as an osmdata object in sf format. — osmdata_sf","text":"q object class overpass_query constructed opq add_osm_feature. May omitted, case osmdata object include query. doc missing, doc obtained issuing overpass query, q, otherwise either name file read data, object class xml2 returned osmdata_xml. quiet suppress status messages. stringsAsFactors character strings 'sf' 'data.frame' coerced factors?","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return an OSM Overpass query as an osmdata object in sf format. — osmdata_sf","text":"object class osmdata OSM components (points, lines, polygons) represented sf format.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return an OSM Overpass query as an osmdata object in sf format. — osmdata_sf","text":"","code":"if (FALSE) { # \\dontrun{ hampi_sf <- opq (\"hampi india\") %>%     add_osm_feature (key = \"historic\", value = \"ruins\") %>%     osmdata_sf () } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_sp.html","id":null,"dir":"Reference","previous_headings":"","what":"Return an OSM Overpass query as an osmdata object in sp format. — osmdata_sp","title":"Return an OSM Overpass query as an osmdata object in sp format. — osmdata_sp","text":"Return OSM Overpass query osmdata object sp format.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_sp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return an OSM Overpass query as an osmdata object in sp format. — osmdata_sp","text":"","code":"osmdata_sp(q, doc, quiet = TRUE)"},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_sp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return an OSM Overpass query as an osmdata object in sp format. — osmdata_sp","text":"q object class overpass_query constructed opq add_osm_feature. May omitted, case osmdata object include query. doc missing, doc obtained issuing overpass query, q, otherwise either name file read data, object class xml2 returned osmdata_xml. quiet suppress status messages.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_sp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return an OSM Overpass query as an osmdata object in sp format. — osmdata_sp","text":"object class osmdata OSM components (points, lines, polygons) represented sp format.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_sp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return an OSM Overpass query as an osmdata object in sp format. — osmdata_sp","text":"","code":"if (FALSE) { # \\dontrun{ hampi_sp <- opq (\"hampi india\") %>%     add_osm_feature (key = \"historic\", value = \"ruins\") %>%     osmdata_sp () } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Return an OSM Overpass query in XML format Read an (XML format) OSM Overpass response from a string, a connection, or a raw vector. — osmdata_xml","title":"Return an OSM Overpass query in XML format Read an (XML format) OSM Overpass response from a string, a connection, or a raw vector. — osmdata_xml","text":"Return OSM Overpass query XML format Read (XML format) OSM Overpass response string, connection, raw vector.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return an OSM Overpass query in XML format Read an (XML format) OSM Overpass response from a string, a connection, or a raw vector. — osmdata_xml","text":"","code":"osmdata_xml(q, filename, quiet = TRUE, encoding)"},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return an OSM Overpass query in XML format Read an (XML format) OSM Overpass response from a string, a connection, or a raw vector. — osmdata_xml","text":"q object class overpass_query constructed opq add_osm_feature. filename given, OSM data saved named file quiet suppress status messages. encoding Unless otherwise specified XML documents assumed encoded UTF-8 UTF-16. document UTF-8/16, lacks explicit encoding directive, allows supply default.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return an OSM Overpass query in XML format Read an (XML format) OSM Overpass response from a string, a connection, or a raw vector. — osmdata_xml","text":"object class xml2::xml_document containing result overpass API query.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_xml.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Return an OSM Overpass query in XML format Read an (XML format) OSM Overpass response from a string, a connection, or a raw vector. — osmdata_xml","text":"Objects class xml_document can saved .xml .osm files xml2::write_xml.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/osmdata_xml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return an OSM Overpass query in XML format Read an (XML format) OSM Overpass response from a string, a connection, or a raw vector. — osmdata_xml","text":"","code":"if (FALSE) { # \\dontrun{ q <- opq (\"hampi india\") q <- add_osm_feature (q, key = \"historic\", value = \"ruins\") osmdata_xml (q, filename = \"hampi.osm\") } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/overpass_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve status of the Overpass API — overpass_status","title":"Retrieve status of the Overpass API — overpass_status","text":"Retrieve status Overpass API","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/overpass_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve status of the Overpass API — overpass_status","text":"","code":"overpass_status(quiet = FALSE)"},{"path":"https://docs.ropensci.org/osmdata/reference/overpass_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve status of the Overpass API — overpass_status","text":"quiet FALSE display status message","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/overpass_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve status of the Overpass API — overpass_status","text":"invisible list whether API available along text message Overpass timestamp next available slot","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"Pipe operator","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://docs.ropensci.org/osmdata/reference/set_overpass_url.html","id":null,"dir":"Reference","previous_headings":"","what":"set_overpass_url — set_overpass_url","title":"set_overpass_url — set_overpass_url","text":"Set URL specified overpass API. Possible APIs global coverage : \"https://overpass-api.de/api/interpreter\" (default) \"https://overpass.kumi.systems/api/interpreter\" \"https://overpass.osm.rambler.ru/cgi/interpreter\" \"https://api.openstreetmap.fr/oapi/interpreter\" \"https://overpass.osm.vi-di.fr/api/interpreter\" Additional APIs limited local coverage include: \"https://overpass.osm.ch/api/interpreter\" (Switzerland) \"https://overpass.openstreetmap.ie/api/interpreter\" (Ireland)","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/set_overpass_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set_overpass_url — set_overpass_url","text":"","code":"set_overpass_url(overpass_url)"},{"path":"https://docs.ropensci.org/osmdata/reference/set_overpass_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set_overpass_url — set_overpass_url","text":"overpass_url desired overpass API URL","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/set_overpass_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set_overpass_url — set_overpass_url","text":"overpass API URL","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/set_overpass_url.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"set_overpass_url — set_overpass_url","text":"details, see https://wiki.openstreetmap.org/wiki/Overpass_API","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/trim_osmdata.html","id":null,"dir":"Reference","previous_headings":"","what":"trim_osmdata — trim_osmdata","title":"trim_osmdata — trim_osmdata","text":"Trim osmdata object within bounding polygon","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/trim_osmdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"trim_osmdata — trim_osmdata","text":"","code":"trim_osmdata(dat, bb_poly, exclude = TRUE)"},{"path":"https://docs.ropensci.org/osmdata/reference/trim_osmdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"trim_osmdata — trim_osmdata","text":"dat osmdata object returned osmdata_sf osmdata_sp. bb_poly matrix representing bounding polygon obtained getbb (..., format_out = \"polygon\") (possibly selected resultant list multiple polygons returned). exclude TRUE, objects trimmed exclusively, retaining strictly within bounding polygon; otherwise objects partly extend within bounding polygon retained.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/trim_osmdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"trim_osmdata — trim_osmdata","text":"trimmed version dat, reduced components lying within bounding polygon.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/trim_osmdata.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"trim_osmdata — trim_osmdata","text":"generally necessary pre-load sf package function work correctly. Caution advised using polygons obtained Nominatim via getbb(..., format_out = \"polygon\"|\"sf_polygon\"). shapes can outdated thus cause trimming operation give results expected based current state OSM data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/trim_osmdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"trim_osmdata — trim_osmdata","text":"","code":"if (FALSE) { # \\dontrun{ dat <- opq (\"colchester uk\") %>%     add_osm_feature (key = \"highway\") %>%     osmdata_sf (quiet = FALSE) bb <- getbb (\"colchester uk\", format_out = \"polygon\") library (sf) # required for this function to work dat_tr <- trim_osmdata (dat, bb) bb <- getbb (\"colchester uk\", format_out = \"sf_polygon\") class (bb) # sf data.frame dat_tr <- trim_osmdata (dat, bb) bb <- as (bb, \"Spatial\") class (bb) # SpatialPolygonsDataFrame dat_tr <- trim_osmdata (dat, bb) } # }"},{"path":"https://docs.ropensci.org/osmdata/reference/unique_osmdata.html","id":null,"dir":"Reference","previous_headings":"","what":"unique_osmdata — unique_osmdata","title":"unique_osmdata — unique_osmdata","text":"Reduce components osmdata object unique items type. , reduce $osm_points points present objects (lines, polygons, etc.); reduce $osm_lines lines present multiline objects; reduce $osm_polygons polygons present multipolygon objects. renders osmdata object directly compatible typical output sf.","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/unique_osmdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"unique_osmdata — unique_osmdata","text":"","code":"unique_osmdata(dat)"},{"path":"https://docs.ropensci.org/osmdata/reference/unique_osmdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"unique_osmdata — unique_osmdata","text":"dat osmdata object","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/unique_osmdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"unique_osmdata — unique_osmdata","text":"Equivalent object reduced unique objects type","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/unname_osmdata_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"unname_osmdata_sf — unname_osmdata_sf","title":"unname_osmdata_sf — unname_osmdata_sf","text":"Remove names osmdata geometry objects, cases cause issues, particularly plotting, https://github.com/rstudio/leaflet/issues/631, https://github.com/r-spatial/sf/issues/1177. Note removing names also removes ability inter-relate different components osmdata object, use function recommended resolve issues linked .","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/unname_osmdata_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"unname_osmdata_sf — unname_osmdata_sf","text":"","code":"unname_osmdata_sf(x)"},{"path":"https://docs.ropensci.org/osmdata/reference/unname_osmdata_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"unname_osmdata_sf — unname_osmdata_sf","text":"x 'osmdata_sf' object returned function name","code":""},{"path":"https://docs.ropensci.org/osmdata/reference/unname_osmdata_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"unname_osmdata_sf — unname_osmdata_sf","text":"object, yet row names geometry objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmdata/reference/unname_osmdata_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"unname_osmdata_sf — unname_osmdata_sf","text":"","code":"if (FALSE) { # \\dontrun{ hampi_sf <- opq (\"hampi india\") %>%     add_osm_feature (key = \"historic\", value = \"ruins\") %>%     osmdata_sf () hampi_clean <- unname_osmdata_sf (hampi_sf)  # All coordinate matrices include rownames with OSM ID values: head (as.matrix (hampi_sf$osm_lines$geometry [[1]])) # But 'unname_osmdata_sf' removes both row and column names: head (as.matrix (hampi_clean$osm_lines$geometry [[1]])) } # }"}]
